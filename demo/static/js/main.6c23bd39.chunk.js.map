{"version":3,"sources":["game/GridBoard.ts","game/index.ts","game/RelatiPlayer.ts","game/RelatiRole.ts","game/RelatiSignal.ts","game/RelatiRouter.ts","game/RelatiGame.ts","game/RelatiSymbolColor.ts","components/Page/Page.tsx","components/Button/Button.tsx","components/Button/ButtonGroup.tsx","pages/MainPage/MainPage.tsx","components/RelatiGame/Board.tsx","components/RelatiGame/Hint.tsx","components/RelatiGame/Grid.tsx","components/MessageBox/MessageBox.tsx","components/RelatiGameEffect/Route.tsx","components/RelatiGameEffect/Effect.tsx","pages/GamePage/GamePage.tsx","pages/HelpPage/HelpPage.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["GridDirection","GridBoard","width","height","Object","C_Users_oo00_Documents_Project_Local_relati_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","this","length","grids","x","y","grid","Grid","i","C_Users_oo00_Documents_Project_Local_relati_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__","key","value","board","body","f","b","r","l","undefined","direction","getGrid","_RelatiGame__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","d","__webpack_exports__","_RelatiRole__WEBPACK_IMPORTED_MODULE_1__","_RelatiSymbolColor__WEBPACK_IMPORTED_MODULE_3__","_RelatiRouter__WEBPACK_IMPORTED_MODULE_4__","RelatiPlayer","symbol","RelatiRole","status","statusName","matchType","statusNameList","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","err","return","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","RelatiSignal","routeType","C_Users_oo00_Documents_Project_Local_relati_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_1__","router","RelatiRouter","role","lost","is","relati","gain","traces","getRoutes","_ref7","C_Users_oo00_Documents_Project_Local_relati_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","F","B","R","L","FR","FL","BR","BL","FF","BB","RR","LL","FFRR","FFLL","BBRR","BBLL","FFR","FFL","BBR","BBL","FRR","FLL","BRR","BLL","NORMAL_ROUTES","REMOTE_NORMAL_ROUTES","REMOTE_STABLE_ROUTES","statusList","targetGrid","middleGrid1","middleGrid2","middleGrid","routes","push","RelatiGame","players","arguments","turn","signal","totalPlayer","winner","forEach","nowPlayer","gridIsPlaceable","interrupt","recovery","playerPlaceable","player","hasPlaceableGrid","hasRoute","","O","X","D","A","Page","_ref","props","esm_extends","className","classNames","react_default","a","createElement","Button","icon","ButtonGroup","MainPage","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","pathName","setState","_this2","react_router","to","id","onClick","e","switchPathTo","React","Component","Board","scaleRatio","window","addEventListener","resize","container","document","getElementById","containerWidth","offsetWidth","containerHeight","offsetHeight","Math","min","onCoorSelect","_e$nativeEvent","nativeEvent","offsetX","offsetY","floor","_this$props","children","boardStyle","transform","concat","horizonLines","verticalLines","stroke","strokeWidth","style","onBoardClick","Hint","color","cx","cy","fill","SymbolPathMap","Fragment","paths","symbolProps","RelatiSymbolColor","MessageBox","objectSpread","controls","show","type","userResponse","text","result","initiative","onUserResponse","Route","routeStyle","map","_ref2","join","Effect","running","sourceRole","route","repeatRelati","_route2","targetRole","slicedToArray","toConsumableArray","reverse","setTimeout","_ref6","cloneBoard","_this3","RelatiGame_Grid","GamePage","game","selectCoor","selectGrid","messageBoxConfig","confirm","hideMessageBox","onGridSelect","gameRestart","restart","toLowerCase","forceUpdate","_this4","_this$game","_this$game$board","hints","getPlaceableGrids","RelatiGame_Hint","RelatiGame_Board","Effect_Effect","confirmSwitchPathTo","MessageBox_MessageBox","HelpPage","App","react_router_dom","path","exact","component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2JACYA,0eA4DL,IAAMC,EAAb,WAeI,SAAAA,EAAYC,EAAeC,GAAiBC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,GAAAK,KAbrCJ,WAaoC,EAAAI,KAXpCH,YAWoC,EAAAG,KATpCC,YASoC,EAAAD,KAPpCE,WAOoC,EACvCF,KAAKJ,MAAQA,EACbI,KAAKH,OAASA,EACdG,KAAKC,OAASL,EAAQC,EACtBG,KAAKE,MAAQ,GAEb,IAAK,IAAIC,EAAI,EAAGA,EAAIP,EAAOO,IACvB,IAAK,IAAIC,EAAI,EAAGA,EAAIP,EAAQO,IAAK,CAC7B,IAAIC,EAAO,IAAIC,EAAeH,EAAGC,EAAGJ,MACpCA,KAAKE,MAAMG,EAAKE,GAAKF,GAxBrC,OAAAP,OAAAU,EAAA,EAAAV,CAAAH,EAAA,EAAAc,IAAA,UAAAC,MAAA,SAmCmBP,EAAWC,GACtB,GACID,EAAI,GAAKA,GAAKH,KAAKJ,OACnBQ,EAAI,GAAKA,GAAKJ,KAAKH,OACrB,OAAO,KAET,IAAIU,EAAIJ,EAAIH,KAAKH,OAASO,EAC1B,OAAOJ,KAAKE,MAAMK,OA1C1BZ,EAAA,GAkDaW,EAAb,WAkBI,SAAAA,EAAYH,EAAWC,EAAWO,GAA6Bb,OAAAC,EAAA,EAAAD,CAAAE,KAAAM,GAAAN,KAhBxDG,OAgBuD,EAAAH,KAdvDI,OAcuD,EAAAJ,KAZvDO,OAYuD,EAAAP,KAVvDY,UAUuD,EAAAZ,KARvDW,WAQuD,EAC1DX,KAAKW,MAAQA,EACbX,KAAKG,EAAIA,EACTH,KAAKI,EAAIA,EACTJ,KAAKO,EAAIJ,EAAIQ,EAAMd,OAASO,EAtBpC,OAAAN,OAAAU,EAAA,EAAAV,CAAAQ,EAAA,EAAAG,IAAA,UAAAC,MAAA,SAmDmBG,EAAWC,EAAYC,EAAYC,GAC9C,QAAUC,IAANH,QAAyBG,IAANF,QAAyBE,IAAND,EAAiB,CACvD,IAAIE,EAAYL,EAChBA,GAAK,MAASK,IAAc,GAC5BJ,GAAK,KAASI,IAAc,EAC5BH,GAAK,IAASG,IAAc,EAC5BF,EAAK,GAASE,EAGlB,IAAIf,EAAIH,KAAKG,EAAIY,EAAIC,EACjBZ,EAAIJ,KAAKI,EAAIU,EAAID,EACrB,OAAOb,KAAKW,MAAMQ,QAAQhB,EAAGC,OA9DrCE,EAAA,yCC/GA,IAAAc,EAAAC,EAAA,IAAAA,EAAAC,EAAAC,EAAA,+BAAAH,EAAA,QAAAI,EAAAH,EAAA,IAAAA,EAAAC,EAAAC,EAAA,+BAAAC,EAAA,IAAAH,EAAA,QAAAI,EAAAJ,EAAA,IAAAA,EAAAC,EAAAC,EAAA,sCAAAE,EAAA,QAAAC,EAAAL,EAAA,IAAAA,EAAAC,EAAAC,EAAA,iCAAAG,EAAA,IAAAL,EAAA,IAAAA,EAAA,kFCEqBM,EACjB,SAAAA,EAAmBC,GAAuB9B,OAAAC,EAAA,EAAAD,CAAAE,KAAA2B,GAAA3B,KAAvB4B,0FCDFC,aAIjB,SAAAA,EAEWxB,EAEAuB,GACR9B,OAAAC,EAAA,EAAAD,CAAAE,KAAA6B,GAAA7B,KAHQK,OAGTL,KADS4B,SACT5B,KAPK8B,OAAwC,kDAsB5CC,EAA2CC,GAC1C,GAA0B,kBAAfD,EAAyB,OAAO/B,KAAK8B,OAAOC,GAEvD,IAAIE,EAAiBF,EAErB,GAAkB,QAAdC,EAAqB,KAAAE,GAAA,EAAAC,GAAA,EAAAC,OAAAnB,EAAA,IACrB,QAAAoB,EAAAC,EAAmBL,EAAnBM,OAAAC,cAAAN,GAAAG,EAAAC,EAAAG,QAAAC,MAAAR,GAAA,EAAmC,KAA1BJ,EAA0BO,EAAA3B,MAC/B,IAAKV,KAAK8B,OAAOA,GAAS,OAAO,GAFhB,MAAAa,GAAAR,GAAA,EAAAC,EAAAO,EAAA,YAAAT,GAAA,MAAAI,EAAAM,QAAAN,EAAAM,SAAA,WAAAT,EAAA,MAAAC,GAKrB,OAAO,EACJ,IAAAS,GAAA,EAAAC,GAAA,EAAAC,OAAA9B,EAAA,IACH,QAAA+B,EAAAC,EAAmBhB,EAAnBM,OAAAC,cAAAK,GAAAG,EAAAC,EAAAR,QAAAC,MAAAG,GAAA,EAAmC,KAA1Bf,EAA0BkB,EAAAtC,MAC/B,GAAIV,KAAK8B,OAAOA,GAAS,OAAO,GAFjC,MAAAa,GAAAG,GAAA,EAAAC,EAAAJ,EAAA,YAAAE,GAAA,MAAAI,EAAAL,QAAAK,EAAAL,SAAA,WAAAE,EAAA,MAAAC,GAKH,OAAO,+BAgBVhB,GACD,GAA0B,kBAAfA,EACP,OAAO/B,KAAK8B,OAAOC,IAAc,EAGrC,IAAIE,EAAiBF,EALuBmB,GAAA,EAAAC,GAAA,EAAAC,OAAAnC,EAAA,IAO5C,QAAAoC,EAAAC,EAAmBrB,EAAnBM,OAAAC,cAAAU,GAAAG,EAAAC,EAAAb,QAAAC,MAAAQ,GAAA,EAAmC,KAA1BpB,EAA0BuB,EAAA3C,MAC/BV,KAAK8B,OAAOA,IAAU,GARkB,MAAAa,GAAAQ,GAAA,EAAAC,EAAAT,EAAA,YAAAO,GAAA,MAAAI,EAAAV,QAAAU,EAAAV,SAAA,WAAAO,EAAA,MAAAC,iCAwB3CrB,GACD,GAA0B,kBAAfA,EACP,OAAO/B,KAAK8B,OAAOC,IAAc,EAGrC,IAAIE,EAAiBF,EALuBwB,GAAA,EAAAC,GAAA,EAAAC,OAAAxC,EAAA,IAO5C,QAAAyC,EAAAC,EAAmB1B,EAAnBM,OAAAC,cAAAe,GAAAG,EAAAC,EAAAlB,QAAAC,MAAAa,GAAA,EAAmC,KAA1BzB,EAA0B4B,EAAAhD,MAC/BV,KAAK8B,OAAOA,IAAU,GARkB,MAAAa,GAAAa,GAAA,EAAAC,EAAAd,EAAA,YAAAY,GAAA,MAAAI,EAAAf,QAAAe,EAAAf,SAAA,WAAAY,EAAA,MAAAC,8GC9E/BG,aAGjB,SAAAA,EACWC,EACAlD,GACRb,OAAAgE,EAAA,EAAAhE,CAAAE,KAAA4D,GAAA5D,KAFQ6D,YAET7D,KADSW,QACTX,KALK+D,YAKL,EAAE/D,KAAK+D,OAAS,IAAIC,IAAaH,2DAEvB,IAAA3B,GAAA,EAAAC,GAAA,EAAAC,OAAAnB,EAAA,IACR,QAAAoB,EAAAC,EAA2BtC,KAAKW,MAAMT,MAAtCqC,OAAAC,cAAAN,GAAAG,EAAAC,EAAAG,QAAAC,MAAAR,GAAA,EAA6C,KAA5B+B,EAA4B5B,EAAA3B,MAAlCE,KACHqD,GACAA,EAAKC,KAAK,aAHV,MAAAvB,GAAAR,GAAA,EAAAC,EAAAO,EAAA,YAAAT,GAAA,MAAAI,EAAAM,QAAAN,EAAAM,SAAA,WAAAT,EAAA,MAAAC,uCAQD,IAAAS,GAAA,EAAAC,GAAA,EAAAC,OAAA9B,EAAA,IACP,QAAA+B,EAAAC,EAA2BjD,KAAKW,MAAMT,MAAtCqC,OAAAC,cAAAK,GAAAG,EAAAC,EAAAR,QAAAC,MAAAG,GAAA,EAA6C,KAA5BoB,EAA4BjB,EAAAtC,MAAlCE,KACHqD,GAAQA,EAAKE,GAAG,aAChBnE,KAAKoE,OAAOH,IAHb,MAAAtB,GAAAG,GAAA,EAAAC,EAAAJ,EAAA,YAAAE,GAAA,MAAAI,EAAAL,QAAAK,EAAAL,SAAA,WAAAE,EAAA,MAAAC,mCAQJkB,GACH,IAAIA,EAAKE,GAAG,YAAZ,CACAF,EAAKI,KAAK,YAEV,IAAIC,EAAyBtE,KAAK+D,OAAOQ,UACrCN,EAAK5D,KAAM4D,EAAKrC,OAAQ,CAAC,aALRsB,GAAA,EAAAC,GAAA,EAAAC,OAAAnC,EAAA,IAQrB,QAAAoC,EAAAC,EAA6BgB,EAA7B/B,OAAAC,cAAAU,GAAAG,EAAAC,EAAAb,QAAAC,MAAAQ,GAAA,EAAqC,KAAAsB,EAAAnB,EAAA3C,MAAnBuD,EAAmBnE,OAAA2E,EAAA,EAAA3E,CAAA0E,EAAA,MAAzB5D,KACJqD,GAAMjE,KAAKoE,OAAOH,IATL,MAAAtB,GAAAQ,GAAA,EAAAC,EAAAT,EAAA,YAAAO,GAAA,MAAAI,EAAAV,QAAAU,EAAAV,SAAA,WAAAO,EAAA,MAAAC,qGCxBzBsB,EAGAhF,IAHAgF,EAAGC,EAGHjF,IAHGiF,EAAGC,EAGNlF,IAHMkF,EAAGC,EAGTnF,IAHSmF,EAAGC,EAGZpF,IAHYoF,GAAIC,EAGhBrF,IAHgBqF,GAAIC,EAGpBtF,IAHoBsF,GAAIC,EAGxBvF,IAHwBuF,GACxBC,EAEAxF,IAFAwF,GAAIC,EAEJzF,IAFIyF,GAAIC,EAER1F,IAFQ0F,GAAIC,EAEZ3F,IAFY2F,GAAIC,EAEhB5F,IAFgB4F,KAAMC,EAEtB7F,IAFsB6F,KAAMC,EAE5B9F,IAF4B8F,KAAMC,EAElC/F,IAFkC+F,KAClCC,EACAhG,IADAgG,IAAKC,EACLjG,IADKiG,IAAKC,EACVlG,IADUkG,IAAKC,EACfnG,IADemG,IAAKC,EACpBpG,IADoBoG,IAAKC,EACzBrG,IADyBqG,IAAKC,EAC9BtG,IAD8BsG,IAAKC,EACnCvG,IADmCuG,IAGjCC,EAAgB,CAACxB,EAAGC,EAAGC,EAAGC,EAAGC,EAAIC,EAAIC,EAAIC,GAEzCkB,EAAuB,CACzB,CAACjB,EAAIR,GACL,CAACS,EAAIR,GACL,CAACS,EAAIR,GACL,CAACS,EAAIR,GACL,CAACS,EAAMR,GACP,CAACS,EAAMR,GACP,CAACS,EAAMR,GACP,CAACS,EAAMR,IAGLmB,EAAuB,CACzB,CAACV,EAAKR,EAAIR,GACV,CAACgB,EAAKZ,EAAIJ,GACV,CAACgB,EAAKZ,EAAIF,GACV,CAACe,EAAKT,EAAIR,GACV,CAACiB,EAAKZ,EAAIL,GACV,CAACiB,EAAKZ,EAAIF,GACV,CAACe,EAAKT,EAAIR,GACV,CAACiB,EAAKZ,EAAIL,GACV,CAACiB,EAAKZ,EAAIJ,GACV,CAACiB,EAAKV,EAAIR,GACV,CAACkB,EAAKZ,EAAIN,GACV,CAACkB,EAAKZ,EAAIJ,GACV,CAACiB,EAAKhB,EAAIJ,GACV,CAACoB,EAAKV,EAAIR,GACV,CAACkB,EAAKhB,EAAIF,GACV,CAACmB,EAAKhB,EAAIL,GACV,CAACqB,EAAKV,EAAIR,GACV,CAACkB,EAAKhB,EAAIF,GACV,CAACmB,EAAKhB,EAAIL,GACV,CAACqB,EAAKZ,EAAIR,GACV,CAACoB,EAAKhB,EAAIJ,GACV,CAACqB,EAAKhB,EAAIN,GACV,CAACsB,EAAKZ,EAAIR,GACV,CAACoB,EAAKhB,EAAIJ,IAGOb,aACjB,SAAAA,EAAmBH,GAA6B/D,OAAAC,EAAA,EAAAD,CAAAE,KAAAgE,GAAAhE,KAA7B6D,iEAEVxD,EAAkBuB,EAAsByE,GAC7C,GAAuB,WAAnBrG,KAAK6D,UAAwB,CAC7B,IAAK,IAAItD,EAAI,EAAGA,EAAI,GAAIA,IAAK,CACzB,IAAI+F,EAAajG,EAAKc,QAAQiF,EAAqB7F,GAAG,IAClDgG,EAAclG,EAAKc,QAAQiF,EAAqB7F,GAAG,IACnDiG,EAAcnG,EAAKc,QAAQiF,EAAqB7F,GAAG,IAEvD,GACI+F,GACAA,EAAW1F,MACX0F,EAAW1F,KAAKgB,SAAWA,GAC3B0E,EAAW1F,KAAKuD,GAAGkC,EAAY,SAC9BE,EAAY3F,OACZ4F,EAAY5F,KACf,OAAO,EAGb,IAAK,IAAIL,EAAI,EAAGA,EAAI,EAAGA,IAAK,CACxB,IAAI+F,EAAajG,EAAKc,QAAQgF,EAAqB5F,GAAG,IAClDkG,EAAapG,EAAKc,QAAQgF,EAAqB5F,GAAG,IAEtD,GACI+F,GACAA,EAAW1F,MACX0F,EAAW1F,KAAKgB,SAAWA,GAC3B0E,EAAW1F,KAAKuD,GAAGkC,EAAY,SAC9BI,EAAW7F,KACd,OAAO,GAIjB,IAAK,IAAIL,EAAI,EAAGA,EAAI,EAAGA,IAAK,CACxB,IAAI+F,EAAajG,EAAKc,QAAQ+E,EAAc3F,IAE5C,GACI+F,GACAA,EAAW1F,MACX0F,EAAW1F,KAAKgB,SAAWA,GAC3B0E,EAAW1F,KAAKuD,GAAGkC,EAAY,OACjC,OAAO,EAGb,OAAO,oCAGDhG,EAAkBuB,EAAsByE,GAC9C,IAAIK,EAAyB,GAE7B,GAAuB,WAAnB1G,KAAK6D,UAAwB,CAC7B,IAAK,IAAItD,EAAI,EAAGA,EAAI,GAAIA,IAAK,CACzB,IAAI+F,EAAajG,EAAKc,QAAQiF,EAAqB7F,GAAG,IAClDgG,EAAclG,EAAKc,QAAQiF,EAAqB7F,GAAG,IACnDiG,EAAcnG,EAAKc,QAAQiF,EAAqB7F,GAAG,IAGnD+F,GACAA,EAAW1F,MACX0F,EAAW1F,KAAKgB,SAAWA,GAC3B0E,EAAW1F,KAAKuD,GAAGkC,EAAY,SAC9BE,EAAY3F,OACZ4F,EAAY5F,MACf8F,EAAOC,KAAK,CAACL,EAAYC,EAAaC,IAG5C,IAAK,IAAIjG,EAAI,EAAGA,EAAI,EAAGA,IAAK,CACxB,IAAI+F,EAAajG,EAAKc,QAAQgF,EAAqB5F,GAAG,IAClDkG,EAAapG,EAAKc,QAAQgF,EAAqB5F,GAAG,IAGlD+F,GACAA,EAAW1F,MACX0F,EAAW1F,KAAKgB,SAAWA,GAC3B0E,EAAW1F,KAAKuD,GAAGkC,EAAY,SAC9BI,EAAW7F,MACd8F,EAAOC,KAAK,CAACL,EAAYG,KAInC,IAAK,IAAIlG,EAAI,EAAGA,EAAI,EAAGA,IAAK,CACxB,IAAI+F,EAAajG,EAAKc,QAAQ+E,EAAc3F,IAGxC+F,GACAA,EAAW1F,MACX0F,EAAW1F,KAAKgB,SAAWA,GAC3B0E,EAAW1F,KAAKuD,GAAGkC,EAAY,QACjCK,EAAOC,KAAK,CAACL,IAGnB,OAAOI,kICtIME,aAQjB,SAAAA,IAIE,IAHSC,EAGTC,UAAA7G,OAAA,QAAAgB,IAAA6F,UAAA,GAAAA,UAAA,GAHmC,CAAC,IAAInF,IAAa,KAAM,IAAIA,IAAa,MACnEhB,EAETmG,UAAA7G,OAAA,QAAAgB,IAAA6F,UAAA,GAAAA,UAAA,GAF8B,IAAInH,IAAsB,EAAG,GAClDkE,EACTiD,UAAA7G,OAAA,QAAAgB,IAAA6F,UAAA,GAAAA,UAAA,GADsC,SACtChH,OAAAC,EAAA,EAAAD,CAAAE,KAAA4G,GAAA5G,KAHS6G,UAGT7G,KAFSW,QAETX,KADS6D,YACT7D,KAXK+G,KAAO,EAWZ/G,KAVKgH,YAUL,EAAAhH,KATK+D,YASL,EAAA/D,KARKiH,iBAQL,EAAAjH,KAPKkH,OAAmC,KAQtClH,KAAKiH,YAAcJ,EAAQ5G,OAC3BD,KAAKgH,OAAS,IAAIpD,IAAaC,EAAWlD,GAC1CX,KAAK+D,OAAS/D,KAAKgH,OAAOjD,6DATL,OAAO/D,KAAK6G,QAAQ7G,KAAK+G,KAAO,sDAarD/G,KAAK+G,KAAO,EACZ/G,KAAKkH,OAAS,KACdlH,KAAKW,MAAMT,MAAMiH,QAAQ,SAAA9G,GAAI,cAAWA,EAAKO,4CAGpCP,GACT,GAAKA,IAAQA,EAAKO,OAAQZ,KAAKkH,OAA/B,CAEI,IAAAjD,EAAQmD,EAA2BpH,KAA3BoH,UAAWH,EAAgBjH,KAAhBiH,YAEvB,GAAIjH,KAAK+G,KAAOE,GACZhD,EAAO,IAAIpC,IAAWxB,EAAM+G,EAAUxF,SACjCyC,KAAK,gBACP,KAAIrE,KAAKqH,gBAAgBhH,EAAM+G,EAAUxF,QAGzC,QAFHqC,EAAO,IAAIpC,IAAWxB,EAAM+G,EAAUxF,SACjCyC,KAAK,YAQd,GALArE,KAAK+G,OACL1G,EAAKO,KAAOqD,EACZjE,KAAKgH,OAAOM,YACZtH,KAAKgH,OAAOO,WAERvH,KAAK+G,MAAQE,EAAa,CAG1B,IAFA,IAAIO,GAAkB,EAEbjH,EAAI,EAAGA,EAAI0G,EAAa1G,IAAK,CAClC,IAAIkH,EAASzH,KAAKoH,UAGlB,GAFuBpH,KAAK0H,iBAAiBD,EAAO7F,QAE9B,CAClB4F,GAAkB,EAClB,MACGxH,KAAK+G,OAGXS,EACIxH,KAAKoH,YAAcA,IAAWpH,KAAKkH,OAASE,EAAUxF,QADzC5B,KAAKkH,OAAS,6CAK5B7G,EAAkBuB,GAC9B,OAAO5B,KAAK+D,OAAO4D,SAAStH,EAAMuB,EAAQ,CAAC,WAAY,sDAG1CA,GAAsB,IAAAM,GAAA,EAAAC,GAAA,EAAAC,OAAAnB,EAAA,IACnC,QAAAoB,EAAAC,EAAiBtC,KAAKW,MAAMT,MAA5BqC,OAAAC,cAAAN,GAAAG,EAAAC,EAAAG,QAAAC,MAAAR,GAAA,EAAmC,KAA1B7B,EAA0BgC,EAAA3B,MAC/B,IAAKL,EAAKO,MAAQZ,KAAKqH,gBAAgBhH,EAAMuB,GACzC,OAAO,GAHoB,MAAAe,GAAAR,GAAA,EAAAC,EAAAO,EAAA,YAAAT,GAAA,MAAAI,EAAAM,QAAAN,EAAAM,SAAA,WAAAT,EAAA,MAAAC,GAOnC,OAAO,4CAGOR,GACd,IAAI1B,EAAsB,GADU2C,GAAA,EAAAC,GAAA,EAAAC,OAAA9B,EAAA,IAGpC,QAAA+B,EAAAC,EAAiBjD,KAAKW,MAAMT,MAA5BqC,OAAAC,cAAAK,GAAAG,EAAAC,EAAAR,QAAAC,MAAAG,GAAA,EAAmC,KAA1BxC,EAA0B2C,EAAAtC,OAC1BL,EAAKO,MAAQZ,KAAKqH,gBAAgBhH,EAAMuB,IACzC1B,EAAMyG,KAAKtG,IALiB,MAAAsC,GAAAG,GAAA,EAAAC,EAAAJ,EAAA,YAAAE,GAAA,MAAAI,EAAAL,QAAAK,EAAAL,SAAA,WAAAE,EAAA,MAAAC,GASpC,OAAO7C,yCC1FAqB,EAAA,GACXqG,GAAI,OACJC,EAAK,UACLC,EAAK,YACLC,EAAK,YACLnD,EAAK,WACLoD,EAAK,qcCGM,SAASC,EAATC,GAAuC,IAApBC,EAAoBrI,OAAAsI,EAAA,EAAAtI,CAAA,GAAAoI,GAEpD,OADAC,EAAME,UAAYC,IAAWH,EAAME,UAAW,QACvCE,EAAAC,EAAAC,cAAA,MAASN,SCFH,SAASO,EAATR,GAAyC,IAArBC,EAAqBrI,OAAAsI,EAAA,EAAAtI,CAAA,GAAAoI,GAGtD,OAFAC,EAAME,UAAYC,IAAWH,EAAME,UAAWF,EAAMQ,aAC7CR,EAAMQ,KACNJ,EAAAC,EAAAC,cAAA,SAAYN,SCHN,SAASS,EAATV,GAAmD,IAA1BC,EAA0BrI,OAAAsI,EAAA,EAAAtI,CAAA,GAAAoI,GAEhE,OADAC,EAAME,UAAYC,IAAWH,EAAME,UAAW,gBACvCE,EAAAC,EAAAC,cAAA,MAASN,OCHGU,cACnB,SAAAA,EAAYV,GAAY,IAAAW,EAAA,OAAAhJ,OAAAiJ,EAAA,EAAAjJ,CAAAE,KAAA6I,IACtBC,EAAAhJ,OAAAkJ,EAAA,EAAAlJ,CAAAE,KAAAF,OAAAmJ,EAAA,EAAAnJ,CAAA+I,GAAAK,KAAAlJ,KAAMmI,KACDgB,MAAQ,CAAEC,SAAU,IAFHN,4EAKXM,GACXpJ,KAAKqJ,SAAS,CAAED,8CAGT,IAAAE,EAAAtJ,KACP,OAAIA,KAAKmJ,MAAMC,SAAiBb,EAAAC,EAAAC,cAACc,EAAA,EAAD,CAAUC,GAAIxJ,KAAKmJ,MAAMC,WAGvDb,EAAAC,EAAAC,cAACR,EAAD,CAAMwB,GAAG,aACPlB,EAAAC,EAAAC,cAAA,OAAKJ,UAAU,SAAf,UACAE,EAAAC,EAAAC,cAACG,EAAD,KACEL,EAAAC,EAAAC,cAACC,EAAD,CAAQC,KAAK,OAAOe,QAAS,SAAAC,GAAC,OAAIL,EAAKM,aAAa,YACpDrB,EAAAC,EAAAC,cAACC,EAAD,CAAQC,KAAK,OAAOe,QAAS,SAAAC,GAAC,OAAIL,EAAKM,aAAa,qBAlBxBC,IAAMC,WCqF7BC,2BA1Eb,SAAAA,EAAY5B,GAAmB,IAAAW,EAAA,OAAAhJ,OAAAiJ,EAAA,EAAAjJ,CAAAE,KAAA+J,IAC7BjB,EAAAhJ,OAAAkJ,EAAA,EAAAlJ,CAAAE,KAAAF,OAAAmJ,EAAA,EAAAnJ,CAAAiK,GAAAb,KAAAlJ,KAAMmI,KAJDvI,WAGwB,EAAAkJ,EAFxBjJ,YAEwB,EAG7BiJ,EAAKlJ,MAAsB,EAAduI,EAAMvI,MACnBkJ,EAAKjJ,OAAwB,EAAfsI,EAAMtI,OACpBiJ,EAAKK,MAAQ,CAAEa,WAAY,GAE3BC,OAAOC,iBAAiB,SAAU,SAAAP,GAAC,OAAIb,EAAKqB,WAPfrB,wEAW7B,IAAIsB,EAAYC,SAASC,eAAetK,KAAKmI,MAAMsB,IACnD,GAAKW,EAAL,CAEA,IAAIG,EAAiBH,EAAUI,YAC3BC,EAAkBL,EAAUM,aAE5BV,EAGA,IAHaW,KAAKC,IACpBL,EAAiBvK,KAAKJ,MACtB6K,EAAkBzK,KAAKH,QAGzBG,KAAKqJ,SAAS,CAAEW,qDAGLL,GAAqB,IAC1BkB,EAAiB7K,KAAKmI,MAAtB0C,aAD0BC,EAELnB,EAAEoB,YAAvBC,EAF0BF,EAE1BE,QAASC,EAFiBH,EAEjBG,QACX9K,EAAIwK,KAAKO,MAAMF,EAAU,GAAI5K,EAAIuK,KAAKO,MAAMD,EAAU,GACtDJ,GAAcA,EAAa,CAAE1K,IAAGC,kDAGhBJ,KAAKmK,0CAazB,IAXO,IAAAb,EAAAtJ,KACDJ,EAAkDI,KAAlDJ,MAAOC,EAA2CG,KAA3CH,OAAQsI,EAAmCnI,KAAnCmI,MADdgD,EACiDnL,KAA5BmI,MAASsB,EAD9B0B,EAC8B1B,GAAI2B,EADlCD,EACkCC,SAErCC,EAAa,CACfzL,QAAOC,SACPyL,UAAS,SAAAC,OAAWvL,KAAKmJ,MAAMa,WAAtB,MAGPwB,EAAe,GACfC,EAAgB,GAEXtL,EAAI,EAAGA,EAAIgI,EAAMtI,OAAQM,IAChCqL,EAAa7E,KACX4B,EAAAC,EAAAC,cAAA,QAAMhI,IAAKN,EAAGuL,OAAO,OAAOC,YAAY,MAAMrK,EAAC,OAAAiK,OAAa,EAAJpL,EAAT,OAAAoL,OAAoB3L,MAIvE,IAAK,IAAIQ,EAAI,EAAGA,EAAI+H,EAAMvI,MAAOQ,IAC/BqL,EAAc9E,KACZ4B,EAAAC,EAAAC,cAAA,QAAMhI,IAAKL,EAAGsL,OAAO,OAAOC,YAAY,MAAMrK,EAAC,KAAAiK,OAAW,EAAJnL,EAAP,SAAAmL,OAAoB1L,MAIvE,OACE0I,EAAAC,EAAAC,cAAA,OAAKgB,GAAIA,EAAIpB,UAAU,mBACrBE,EAAAC,EAAAC,cAAA,OAAKJ,UAAU,eAAeuD,MAAOP,GACnC9C,EAAAC,EAAAC,cAAA,OAAK7I,MAAOA,EAAOC,OAAQA,GACxBuL,EACD7C,EAAAC,EAAAC,cAAA,KAAGJ,UAAU,cACVmD,EACAC,IAGLlD,EAAAC,EAAAC,cAAA,OAAKiB,QAAS,SAAAC,GAAC,OAAIL,EAAKuC,aAAalC,eAvE3BE,IAAMC,YCLXgC,MANf,SAAA5D,GAA0C,IAA1B/H,EAA0B+H,EAA1B/H,EAAGC,EAAuB8H,EAAvB9H,EAAG2L,EAAoB7D,EAApB6D,MAChBC,EAAS,EAAJ7L,EAAQ,IACb8L,EAAS,EAAJ7L,EAAQ,IACjB,OAAOmI,EAAAC,EAAAC,cAAA,UAAQuD,GAAIA,EAAIC,GAAIA,EAAIlL,EAAE,MAAMmL,KAAMH,aCFzCI,EAAgB,CACpBtE,EAAK,0DACLC,EAAK,sCAgCQxH,MA7Bf,SAAA4H,GAAmC,IAAnB7H,EAAmB6H,EAAnB7H,KACd,IAAKA,EAAKO,KAAM,OAAO2H,EAAAC,EAAAC,cAAAF,EAAAC,EAAA4D,SAAA,MAEvB,IAAIC,EAAQ,GACRlM,EAAa,EAATE,EAAKF,EAAQ,IACjBC,EAAa,EAATC,EAAKD,EAAQ,IAEjBkM,EAAc,CAChB7L,IAAK,IACLyL,KAAM,OACNP,YAAa,MACbD,OAAQa,oBAAkBlM,EAAKO,KAAKgB,QACpCN,EAAC,KAAAiK,OAAOpL,EAAP,KAAAoL,OAAYnL,EAAZ,MAAAmL,OAAkBY,EAAc9L,EAAKO,KAAKgB,UAc7C,OAXIvB,EAAKO,KAAKuD,GAAG,aACfmI,EAAYX,YAAc,IAC1BU,EAAM1F,KAAK4B,EAAAC,EAAAC,cAAA,OAAU6D,IACrBA,EAAY7L,IAAM,IAClB6L,EAAYZ,OAAS,UACrBY,EAAYX,YAAc,OAChBtL,EAAKO,KAAKuD,GAAG,cACvBmI,EAAYZ,OAAS,QAGvBW,EAAM1F,KAAK4B,EAAAC,EAAAC,cAAA,OAAU6D,IACd/D,EAAAC,EAAAC,cAAA,SAAI4D,YC5BQG,qBACnB,SAAAA,EAAYrE,GAAwB,IAAAW,EAAA,OAAAhJ,OAAAiJ,EAAA,EAAAjJ,CAAAE,KAAAwM,IAClC1D,EAAAhJ,OAAAkJ,EAAA,EAAAlJ,CAAAE,KAAAF,OAAAmJ,EAAA,EAAAnJ,CAAA0M,GAAAtD,KAAAlJ,KAAMmI,KACDgB,MAALrJ,OAAA2M,EAAA,EAAA3M,CAAA,GAAkBqI,GAFgBW,wEAY3B,IAGH4D,EAHGpD,EAAAtJ,KACP,IAAwB,IAApBA,KAAKmJ,MAAMwD,KAAgB,OAAOpE,EAAAC,EAAAC,cAAAF,EAAAC,EAAA4D,SAAA,MAItC,OAAQpM,KAAKmJ,MAAMyD,MACjB,IAAK,OAAQF,EACXnE,EAAAC,EAAAC,cAACG,EAAD,KACEL,EAAAC,EAAAC,cAACC,EAAD,CAAQC,KAAK,SAASe,QAAS,SAAAC,GAAC,OAAIL,EAAKuD,cAAa,MACtDtE,EAAAC,EAAAC,cAACC,EAAD,CAAQC,KAAK,SAASe,QAAS,SAAAC,GAAC,OAAIL,EAAKuD,cAAa,OAEvD,MAEH,IAAK,OAAQH,EACXnE,EAAAC,EAAAC,cAACG,EAAD,KACEL,EAAAC,EAAAC,cAACC,EAAD,CAAQC,KAAK,SAASe,QAAS,SAAAC,GAAC,OAAIL,EAAKuD,cAAa,OAK5D,OACEtE,EAAAC,EAAAC,cAAA,OAAKJ,UAAU,yBACbE,EAAAC,EAAAC,cAAA,OAAKJ,UAAU,eACbE,EAAAC,EAAAC,cAAA,OAAKJ,UAAS,gBAAAkD,OAAkBvL,KAAKmJ,MAAMR,QAC3CJ,EAAAC,EAAAC,cAAA,OAAKJ,UAAU,gBAAgBrI,KAAKmJ,MAAM2D,MACzCJ,yCAMIK,GACX/M,KAAKqJ,SAAS,CAAEsD,MAAM,EAAOK,YAAY,IACzChN,KAAKmI,MAAM8E,gBAAkBjN,KAAKmI,MAAM8E,eAAeF,sDAxCzB5E,EAAwBgB,GACtD,OAAIA,EAAM6D,mBACD7D,EAAM6D,WACN7D,GACFrJ,OAAA2M,EAAA,EAAA3M,CAAA,GAAYqI,UAViB0B,IAAMC,2CCD/B,SAASoD,EAAThF,GAAsC,IAArBhI,EAAqBgI,EAArBhI,MAC9B,IAAKA,EAAM,GAAI,OAAOqI,EAAAC,EAAAC,cAAAF,EAAAC,EAAA4D,SAAA,MAEtB,IAAIe,EAAa,CACfjB,KAAM,OACNP,YAAa,MACbD,OAAQa,oBAAmBrM,EAAM,GAAGU,KAAoBgB,QACxDN,EAAC,KAAAiK,OAAOrL,EAAMkN,IAAI,SAAAC,GAAA,IAAGlN,EAAHkN,EAAGlN,EAAGC,EAANiN,EAAMjN,EAAN,SAAAmL,OACT,EAAJpL,EAAQ,IADK,KAAAoL,OACM,EAAJnL,EAAQ,OACzBkN,KAAK,UAGV,OAAO/E,EAAAC,EAAAC,cAAA,OAAU0E,OCCEI,cAInB,SAAAA,EAAYpF,GAAoB,IAAAW,EAAA,OAAAhJ,OAAAiJ,EAAA,EAAAjJ,CAAAE,KAAAuN,IAC9BzE,EAAAhJ,OAAAkJ,EAAA,EAAAlJ,CAAAE,KAAAF,OAAAmJ,EAAA,EAAAnJ,CAAAyN,GAAArE,KAAAlJ,KAAMmI,KAJDxH,WAGyB,EAAAmI,EAFzB/E,YAEyB,EAG9B+E,EAAKK,MAAQ,CACXpC,KAAMoB,EAAMpB,KACZyG,SAAS,EACT9G,OAAQ,IAGVoC,EAAKnI,MAAQ,IAAIhB,IAAsBwI,EAAMxH,MAAMf,MAAOuI,EAAMxH,MAAMd,QACtEiJ,EAAK/E,OAAS,IAAIC,eAAamE,EAAMtE,WAVPiF,wEAuBvB/B,GAAc,IAAA7E,GAAA,EAAAC,GAAA,EAAAC,OAAAnB,EAAA,IACrB,QAAAoB,EAAAC,EAA2BtC,KAAKW,MAAMT,MAAtCqC,OAAAC,cAAAN,GAAAG,EAAAC,EAAAG,QAAAC,MAAAR,GAAA,EAA6C,KAA5B+B,EAA4B5B,EAAA3B,MAAlCE,KACLqD,GAAQA,EAAKE,GAAG,aAClBnE,KAAKoE,OAAOH,EAAM8C,IAHD,MAAApE,GAAAR,GAAA,EAAAC,EAAAO,EAAA,YAAAT,GAAA,MAAAI,EAAAM,QAAAN,EAAAM,SAAA,WAAAT,EAAA,MAAAC,mCAQhBqL,EAAwB1G,GAAwC,IAAAuC,EAAAtJ,KAA1B0N,EAA0B5G,UAAA7G,OAAA,QAAAgB,IAAA6F,UAAA,GAAAA,UAAA,GAAJ,GACjE,IAAI2G,EAAWtJ,GAAG,YAAlB,CACAsJ,EAAWpJ,KAAK,YAEhB,IAAIsJ,EAAe,WACjB,IAAIjH,EAAyB4C,EAAKvF,OAAOQ,UACvCkJ,EAAWpN,KAAMoN,EAAW7L,OAAQ,CAAC,aAFhBiB,GAAA,EAAAC,GAAA,EAAAC,OAAA9B,EAAA,IAKvB,QAAA+B,EAAAC,EAAkByD,EAAlBnE,OAAAC,cAAAK,GAAAG,EAAAC,EAAAR,QAAAC,MAAAG,GAAA,EAA0B,KAAjB6K,EAAiB1K,EAAAtC,MAAAkN,EACKF,EAAhBG,EADW/N,OAAAgO,EAAA,EAAAhO,CAAA8N,EAAA,MACjBhN,KAEHiN,IACFH,EAAK,CAAID,EAAWpN,MAAfkL,OAAAzL,OAAAiO,EAAA,EAAAjO,CAAwB4N,EAAMM,YACnC1E,EAAKlF,OAAOyJ,EAAY9G,EAAM2G,KAVX,MAAA/K,GAAAG,GAAA,EAAAC,EAAAJ,EAAA,YAAAE,GAAA,MAAAI,EAAAL,QAAAK,EAAAL,SAAA,WAAAE,EAAA,MAAAC,KAerB/C,KAAKmJ,MAAMpC,OAASA,GACtB/G,KAAKqJ,SAAS,CACZmE,SAAS,EACT9G,OAAM,GAAA6E,OAAAzL,OAAAiO,EAAA,EAAAjO,CAAME,KAAKmJ,MAAMzC,QAAjB,CAAyBgH,MAGjCO,WAAWN,EAAc,MACpBA,yCAGG,IAAAzK,GAAA,EAAAC,GAAA,EAAAC,OAAAnC,EAAA,IACV,QAAAoC,EAAAC,EAA2BtD,KAAKW,MAAMT,MAAtCqC,OAAAC,cAAAU,GAAAG,EAAAC,EAAAb,QAAAC,MAAAQ,GAAA,EAA6C,KAA5Be,EAA4BZ,EAAA3C,MAAlCE,KACLqD,GAAQA,EAAKrC,SAAW5B,KAAKmI,MAAMvG,QACrCqC,EAAKC,KAAK,aAHJ,MAAAvB,GAAAQ,GAAA,EAAAC,EAAAT,EAAA,YAAAO,GAAA,MAAAI,EAAAV,QAAAU,EAAAV,SAAA,WAAAO,EAAA,MAAAC,yCAQC,IAAAG,GAAA,EAAAC,GAAA,EAAAC,OAAAxC,EAAA,IACX,QAAAyC,EAAAC,EAA8B3D,KAAKmI,MAAMxH,MAAMT,MAA/CqC,OAAAC,cAAAe,GAAAG,EAAAC,EAAAlB,QAAAC,MAAAa,GAAA,EAAsD,KAAA2K,EAAAxK,EAAAhD,MAA3CH,EAA2C2N,EAA3C3N,EAAS0D,EAAkCiK,EAAxCtN,KACRP,EAAOL,KAAKW,MAAMT,MAAMK,GAExB0D,EACG5D,EAAKO,OACRP,EAAKO,KAAO,IAAIiB,aAAWxB,EAAM4D,EAAKrC,QACtCvB,EAAKO,KAAKkB,OAAVhC,OAAA2M,EAAA,EAAA3M,CAAA,GAAwBmE,EAAKnC,gBAEnBzB,EAAKO,MATV,MAAA+B,GAAAa,GAAA,EAAAC,EAAAd,EAAA,YAAAY,GAAA,MAAAI,EAAAf,QAAAe,EAAAf,SAAA,WAAAY,EAAA,MAAAC,iDAcNzD,KAAKmJ,MAAMqE,UACdxN,KAAKmO,aACLnO,KAAKsH,YACLtH,KAAKuH,SAASvH,KAAKmI,MAAMpB,wCAIpB,IAAAqH,EAAApO,KACHE,EAAQF,KAAKW,MAAMT,MAAMkN,IAAI,SAAC/M,EAAMI,GACtC,IAAIwD,EAAOmK,EAAKjG,MAAMxH,MAAMT,MAAMO,GAAKG,KAQvC,OANIqD,IAASA,EAAKE,GAAG,aACf9D,EAAKO,MACPP,EAAKO,KAAKsD,KAAK,YAIZqE,EAAAC,EAAAC,cAAC4F,EAAD,CAAM5N,IAAKA,EAAKJ,KAAMA,MAG3BqG,EAAS1G,KAAKmJ,MAAMzC,OAAO0G,IAAI,SAACM,EAAOjN,GAAR,OACjC8H,EAAAC,EAAAC,cAACyE,EAAD,CAAOzM,IAAKA,EAAKP,MAAOwN,MAG1B,OACEnF,EAAAC,EAAAC,cAAAF,EAAAC,EAAA4D,SAAA,KACE7D,EAAAC,EAAAC,cAAA,KAAGJ,UAAU,gBAAgB3B,GAC7B6B,EAAAC,EAAAC,cAAA,KAAGJ,UAAU,gBAAgBnI,uDAhGHiI,EAAoBgB,GAClD,OAAIhB,EAAMpB,OAASoC,EAAMpC,KAChB,CACLA,KAAMoB,EAAMpB,KACZyG,SAAS,EACT9G,OAAQ,IAEE,YAxBkBmD,IAAMC,WC6F3BwE,cA9Fb,SAAAA,EAAYnG,GAAY,IAAAW,EAAA,OAAAhJ,OAAAiJ,EAAA,EAAAjJ,CAAAE,KAAAsO,IACtBxF,EAAAhJ,OAAAkJ,EAAA,EAAAlJ,CAAAE,KAAAF,OAAAmJ,EAAA,EAAAnJ,CAAAwO,GAAApF,KAAAlJ,KAAMmI,KAPDoG,KAAO,IAAI3H,aAMMkC,EAJjB0F,WAAa,SAAAtG,GAAA,IAAG/H,EAAH+H,EAAG/H,EAAGC,EAAN8H,EAAM9H,EAAN,OAClB0I,EAAK2F,WAAW3F,EAAKyF,KAAK5N,MAAMQ,QAAQhB,EAAGC,KAM3C0I,EAAKK,MAAQ,CACXC,SAAU,GACVsF,iBAAkB,CAAE/B,MAAM,IALN7D,gFAUtB9I,KAAKqJ,SAAS,CAAEqF,iBAAkB,CAAE/B,MAAM,iDAGxBvD,GAAkB,IAAAE,EAAAtJ,KACpCA,KAAKqJ,SAAS,CACZqF,iBAAkB,CAChB/F,KAAM,OACNmE,KAAM,2BACNH,MAAM,EACNC,KAAM,OACNK,eAAgB,SAAA0B,GACVA,EAASrF,EAAKM,aAAaR,GAC1BE,EAAKsF,0DAMLxF,GACXpJ,KAAKqJ,SAAS,CAAED,gDAGP/I,GAAyB,IAAA+N,EAAApO,KAC5BuO,EAASvO,KAATuO,KAGN,GAFAA,EAAKM,aAAaxO,GAEE,OAAhBkO,EAAKrH,OAAiB,CACxB,IAAIwH,EAAqC,CACvC/F,KAAM,OACNmE,KAAM,eACNH,MAAM,EACNC,KAAM,OACNK,eAAgB,SAAA6B,GACVA,GAAaP,EAAKQ,UACtBX,EAAK/E,SAAS,CAAEqF,iBAAkB,CAAE/B,MAAM,OAI1B,KAAhB4B,EAAKrH,SACPwH,EAAiB/F,KAAjB,GAAA4C,OAA2BgD,EAAKrH,OAAO8H,cAAvC,OACAN,EAAiB5B,KAAjB,GAAAvB,OAA2BgD,EAAKrH,OAAhC,iBAGFlH,KAAKqJ,SAAS,CAAEqF,0BACX1O,KAAKiP,+CAGL,IAAAC,EAAAlP,KACP,GAAIA,KAAKmJ,MAAMC,SAAU,OAAOb,EAAAC,EAAAC,cAACc,EAAA,EAAD,CAAUC,GAAIxJ,KAAKmJ,MAAMC,WADlD,IAAA+F,EASHnP,KAAKuO,KALPxH,EAJKoI,EAILpI,KACApG,EALKwO,EAKLxO,MACAkD,EANKsL,EAMLtL,UANKuL,EAAAD,EAOLxO,MAASf,EAPJwP,EAOIxP,MAAOC,EAPXuP,EAOWvP,OACH+B,EARRuN,EAQL/H,UAAaxF,OAGXyN,EAAQrP,KAAKuO,KAAKe,kBAAkB1N,GAAQwL,IAC9C,SAAAC,EAAW5M,GAAX,IAAGN,EAAHkN,EAAGlN,EAAGC,EAANiN,EAAMjN,EAAN,OACEmI,EAAAC,EAAAC,cAAC8G,EAAD,CAAM9O,IAAKA,EAAKN,EAAGA,EAAGC,EAAGA,EAAG2L,MAAOQ,oBAAkB3K,OAIzD,OACE2G,EAAAC,EAAAC,cAACR,EAAD,CAAMwB,GAAG,aACPlB,EAAAC,EAAAC,cAAA,OAAKJ,UAAU,iBACbE,EAAAC,EAAAC,cAAA,OAAKJ,UAAU,aACfE,EAAAC,EAAAC,cAAA,OAAKJ,UAAU,WACfE,EAAAC,EAAAC,cAAA,OAAKJ,UAAU,cAEjBE,EAAAC,EAAAC,cAAC+G,EAAD,CAAO/F,GAAG,aAAa7J,MAAOA,EAAOC,OAAQA,EAAQgL,aAAc7K,KAAKwO,YACtEjG,EAAAC,EAAAC,cAAA,KAAGJ,UAAU,SAASgH,GACtB9G,EAAAC,EAAAC,cAACgH,EAAD,CAAQ1I,KAAMA,EAAMnF,OAAQA,EAAQjB,MAAOA,EAAOkD,UAAWA,KAE/D0E,EAAAC,EAAAC,cAACG,EAAD,KACEL,EAAAC,EAAAC,cAACC,EAAD,CAAQC,KAAK,OAAOe,QAAS,SAAAC,GAAC,OAAIuF,EAAKQ,oBAAoB,aAE7DnH,EAAAC,EAAAC,cAACkH,EAAe3P,KAAKmJ,MAAMuF,0BA/FZ7E,IAAMC,WCFR8F,qBAGnB,SAAAA,EAAYzH,GAAY,IAAAW,EAAA,OAAAhJ,OAAAiJ,EAAA,EAAAjJ,CAAAE,KAAA4P,IACtB9G,EAAAhJ,OAAAkJ,EAAA,EAAAlJ,CAAAE,KAAAF,OAAAmJ,EAAA,EAAAnJ,CAAA8P,GAAA1G,KAAAlJ,KAAMmI,KAHDoG,KAAO,IAAI3H,aAKhBkC,EAAKK,MAAQ,CACXC,SAAU,GACVsF,iBAAkB,CAAE/B,MAAM,IALN7D,gFAUtB9I,KAAKqJ,SAAS,CAAEqF,iBAAkB,CAAE/B,MAAM,iDAGxBvD,GAAkB,IAAAE,EAAAtJ,KACpCA,KAAKqJ,SAAS,CACZqF,iBAAkB,CAChB/F,KAAM,OACNmE,KAAM,2BACNH,MAAM,EACNC,KAAM,OACNK,eAAgB,SAAA0B,GACVA,EAASrF,EAAKM,aAAaR,GAC1BE,EAAKsF,0DAMLxF,GACXpJ,KAAKqJ,SAAS,CAAED,8CAGT,IAAAgF,EAAApO,KACP,OAAIA,KAAKmJ,MAAMC,SAAiBb,EAAAC,EAAAC,cAACc,EAAA,EAAD,CAAUC,GAAIxJ,KAAKmJ,MAAMC,WAGvDb,EAAAC,EAAAC,cAACR,EAAD,CAAMwB,GAAG,aACPlB,EAAAC,EAAAC,cAAA,OAAKJ,UAAU,eACbE,EAAAC,EAAAC,cAAA,sCACAF,EAAAC,EAAAC,cAAA,yHACAF,EAAAC,EAAAC,cAAA,yHACAF,EAAAC,EAAAC,cAAA,2OACAF,EAAAC,EAAAC,cAAA,mQACAF,EAAAC,EAAAC,cAAA,6MACAF,EAAAC,EAAAC,cAAA,0HAEFF,EAAAC,EAAAC,cAACG,EAAD,KACEL,EAAAC,EAAAC,cAACC,EAAD,CAAQC,KAAK,OAAOe,QAAS,kBAAM0E,EAAKsB,oBAAoB,aAE9DnH,EAAAC,EAAAC,cAACkH,EAAe3P,KAAKmJ,MAAMuF,0BApDG7E,IAAMC,YCU7B+F,mLAVX,OACEtH,EAAAC,EAAAC,cAACqH,EAAA,EAAD,KACEvH,EAAAC,EAAAC,cAACc,EAAA,EAAD,CAAOwG,KAAK,qBAAqBC,OAAK,EAACC,UAAWpH,IAClDN,EAAAC,EAAAC,cAACc,EAAA,EAAD,CAAOwG,KAAK,eAAeE,UAAW3B,IACtC/F,EAAAC,EAAAC,cAACc,EAAA,EAAD,CAAOwG,KAAK,QAAQE,UAAWL,YANrB/F,IAAMC,WCIJoG,QACW,cAA7BjG,OAAOkG,SAASC,UAEe,UAA7BnG,OAAOkG,SAASC,UAEhBnG,OAAOkG,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhI,EAAAC,EAAAC,cAAC+H,EAAD,MAASnG,SAASC,eAAe,SDmI3C,kBAAmBmG,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.6c23bd39.chunk.js","sourcesContent":["/** 棋盤格方向(相對位置) */\r\nexport enum GridDirection {\r\n    /** (x + 0, y + 0)原位 */\r\n    C = 0x0000,\r\n\r\n    /** (x + 0, y - 1)向前 */\r\n    F = 0x1000,\r\n    /** (x + 0, y + 1)向後 */\r\n    B = 0x0100,\r\n    /** (x + 1, y + 0)向右 */\r\n    R = 0x0010,\r\n    /** (x - 1, y + 0)向左 */\r\n    L = 0x0001,\r\n    /** (x + 1, y - 1)向右前 */\r\n    FR = 0x1010,\r\n    /** (x - 1, y - 1)向左前 */\r\n    FL = 0x1001,\r\n    /** (x + 1, y + 1)向右後 */\r\n    BR = 0x0110,\r\n    /** (x - 1, y + 1)向左後 */\r\n    BL = 0x0101,\r\n\r\n    /** (x + 0, y - 2)向前兩單位 */\r\n    FF = 0x2000,\r\n    /** (x + 0, y + 2)向後兩單位 */\r\n    BB = 0x0200,\r\n    /** (x + 2, y + 0)向右兩單位 */\r\n    RR = 0x0020,\r\n    /** (x - 2, y + 0)向左兩單位 */\r\n    LL = 0x0002,\r\n    /** (x + 2, y - 2)向右前兩單位 */\r\n    FFRR = 0x2020,\r\n    /** (x - 2, y - 2)向左前兩單位 */\r\n    FFLL = 0x2002,\r\n    /** (x + 2, y + 2)向右後兩單位 */\r\n    BBRR = 0x0220,\r\n    /** (x - 2, y + 2)向左後兩單位 */\r\n    BBLL = 0x0202,\r\n\r\n    /** (x + 1, y - 2) */\r\n    FFR = 0x2010,\r\n    /** (x - 1, y - 2) */\r\n    FFL = 0x2001,\r\n    /** (x + 1, y + 2) */\r\n    BBR = 0x0210,\r\n    /** (x - 1, y + 2) */\r\n    BBL = 0x0201,\r\n    /** (x + 2, y - 1) */\r\n    FRR = 0x1020,\r\n    /** (x - 2, y - 1) */\r\n    FLL = 0x1002,\r\n    /** (x + 2, y + 1) */\r\n    BRR = 0x0120,\r\n    /** (x - 2, y + 1) */\r\n    BLL = 0x0102\r\n}\r\n\r\n/**\r\n * 棋盤\r\n * @generic {GridBody} 棋盤格內容\r\n */\r\nexport class GridBoard<GridBody> {\r\n    /** 寬度 */\r\n    public width: number;\r\n    /** 高度 */\r\n    public height: number;\r\n    /** 格數 */\r\n    public length: number;\r\n    /** 棋盤格 */\r\n    public grids: Grid<GridBody>[];\r\n\r\n    /**\r\n     * 建立棋盤\r\n     * @param width 寬度\r\n     * @param height 高度\r\n     */\r\n    constructor(width: number, height: number) {\r\n        this.width = width;\r\n        this.height = height;\r\n        this.length = width * height;\r\n        this.grids = [];\r\n\r\n        for (let x = 0; x < width; x++) {\r\n            for (let y = 0; y < height; y++) {\r\n                let grid = new Grid<GridBody>(x, y, this);\r\n                this.grids[grid.i] = grid;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 取得棋盤格\r\n     * @param x X座標\r\n     * @param y Y座標\r\n     * @return 棋盤格或空值\r\n     */\r\n    public getGrid(x: number, y: number): Grid<GridBody> | null {\r\n        if (\r\n            x < 0 || x >= this.width ||\r\n            y < 0 || y >= this.height\r\n        ) return null;\r\n\r\n        let i = x * this.height + y;\r\n        return this.grids[i];\r\n    }\r\n}\r\n\r\n/**\r\n * 棋盤格\r\n * @generic {GridBody} 棋盤格內容\r\n */\r\nexport class Grid<GridBody> {\r\n    /** X座標 */\r\n    public x: number;\r\n    /** Y座標 */\r\n    public y: number;\r\n    /** 索引 */\r\n    public i: number;\r\n    /** 內容 */\r\n    public body?: GridBody;\r\n    /** 所屬棋盤 */\r\n    public board: GridBoard<GridBody>;\r\n\r\n    /**\r\n     * 建立棋盤格\r\n     * @param x X座標\r\n     * @param y Y座標\r\n     * @param board 棋盤\r\n     */\r\n    constructor(x: number, y: number, board: GridBoard<GridBody>) {\r\n        this.board = board;\r\n        this.x = x;\r\n        this.y = y;\r\n        this.i = x * board.height + y;\r\n    }\r\n\r\n    /**\r\n     * 取得棋盤格\r\n     * @param direction 相對位置(方向)\r\n     * @see GridDirection\r\n     * @return 棋盤格或空值\r\n     */\r\n    public getGrid(direction: GridDirection): Grid<GridBody> | null;\r\n\r\n    /**\r\n     * 取得棋盤格\r\n     * @param direction 相對位置(方向)，採用16進制，分別為F(Y - 1), B(Y + 1), R(X + 1), L(X - 1)\r\n     * @example\r\n     * var direction = 0x8050; // == (Y - 8, X + 5);\r\n     * @return 棋盤格或空值\r\n     */\r\n    public getGrid(direction: number): Grid<GridBody> | null;\r\n\r\n    /**\r\n     * 取得棋盤格\r\n     * @param f 相對位置，為-Y的移動單位\r\n     * @param b 相對位置，為+Y的移動單位\r\n     * @param r 相對位置，為+X的移動單位\r\n     * @param l 相對位置，為-X的移動單位\r\n     * @return 棋盤格或空值\r\n     */\r\n    public getGrid(f: number, b: number, r: number, l: number): Grid<GridBody> | null;\r\n    public getGrid(f: number, b?: number, r?: number, l?: number): Grid<GridBody> | null {\r\n        if (b === undefined || r === undefined || l === undefined) {\r\n            let direction = f;\r\n            f = (0xF000 & direction) >> 12;\r\n            b = (0x0F00 & direction) >> 8;\r\n            r = (0x00F0 & direction) >> 4;\r\n            l = (0x000F & direction);\r\n        }\r\n\r\n        let x = this.x + r - l;\r\n        let y = this.y + b - f;\r\n        return this.board.getGrid(x, y);\r\n    }\r\n}","export { default as RelatiGame } from \"./RelatiGame\";\r\nexport { default as RelatiRole } from \"./RelatiRole\";\r\nexport { default as RelatiPlayer } from \"./RelatiPlayer\";\r\nexport { default as RelatiSymbolColor } from \"./RelatiSymbolColor\";\r\nexport { default as RelatiRouter } from \"./RelatiRouter\";\r\nexport { default as RelatiSignal } from \"./RelatiSignal\";\r\nexport * from \"./RelatiDefs\";","import { RelatiSymbol } from \"./RelatiDefs\";\r\n\r\nexport default class RelatiPlayer {\r\n    constructor(public symbol: RelatiSymbol) { }\r\n}\r\n","import { RelatiSymbol, RelatiGrid, RelatiStatus } from \"./RelatiDefs\";\r\n\r\nexport default class RelatiRole {\r\n    /** 狀態存儲 */\r\n    public status: { [status: string]: boolean } = {};\r\n\r\n    constructor(\r\n        /** 所在棋盤格 */\r\n        public grid: RelatiGrid,\r\n        /** 符號 */\r\n        public symbol: RelatiSymbol\r\n    ) { }\r\n\r\n    /**\r\n     * 判斷是否符合狀態\r\n     * @param statusName 狀態名稱\r\n     */\r\n    is(statusName: RelatiStatus): boolean;\r\n\r\n    /**\r\n     * 判斷是否符合所有狀態或任一狀態\r\n     * @param statusNameList 狀態名稱列表\r\n     * @param matchType 所有狀態 | 任一狀態\r\n     */\r\n    is(statusNameList: RelatiStatus[], matchType: \"all\" | \"any\"): boolean;\r\n\r\n    is(statusName: RelatiStatus | RelatiStatus[], matchType?: \"all\" | \"any\") {\r\n        if (typeof statusName === \"string\") return this.status[statusName];\r\n\r\n        let statusNameList = statusName;\r\n\r\n        if (matchType === \"all\") {\r\n            for (let status of statusNameList) {\r\n                if (!this.status[status]) return false;\r\n            }\r\n\r\n            return true;\r\n        } else {\r\n            for (let status of statusNameList) {\r\n                if (this.status[status]) return true;\r\n            }\r\n\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 獲得狀態\r\n     * @param status 狀態名稱\r\n     */\r\n    gain(status: RelatiStatus): void;\r\n\r\n    /**\r\n     * 獲得多個狀態\r\n     * @param statusNameList 狀態名稱列表\r\n     */\r\n    gain(statusNameList: RelatiStatus[]): void;\r\n\r\n    gain(statusName: RelatiStatus | RelatiStatus[]) {\r\n        if (typeof statusName === \"string\") {\r\n            return this.status[statusName] = true;\r\n        }\r\n\r\n        let statusNameList = statusName;\r\n\r\n        for (let status of statusNameList) {\r\n            this.status[status] = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 失去狀態\r\n     * @param status 狀態名稱\r\n     */\r\n    lost(status: RelatiStatus): void;\r\n\r\n    /**\r\n     * 失去多個狀態\r\n     * @param statusNameList 狀態名稱列表\r\n     */\r\n    lost(statusNameList: RelatiStatus[]): void;\r\n\r\n    lost(statusName: RelatiStatus | RelatiStatus[]) {\r\n        if (typeof statusName === \"string\") {\r\n            return this.status[statusName] = false;\r\n        }\r\n\r\n        let statusNameList = statusName;\r\n\r\n        for (let status of statusNameList) {\r\n            this.status[status] = false;\r\n        }\r\n    }\r\n}\r\n","import { RelatiBoard, RelatiRouteType, RelatiGrid } from \"./RelatiDefs\";\r\nimport RelatiRole from \"./RelatiRole\";\r\nimport RelatiRouter from \"./RelatiRouter\";\r\n\r\nexport default class RelatiSignal {\r\n    public router: RelatiRouter;\r\n\r\n    constructor(\r\n        public routeType: RelatiRouteType,\r\n        public board: RelatiBoard\r\n    ) { this.router = new RelatiRouter(routeType); }\r\n\r\n    interrupt() {\r\n        for (let { body: role } of this.board.grids) {\r\n            if (role) {\r\n                role.lost(\"repeater\");\r\n            }\r\n        }\r\n    }\r\n\r\n    recovery() {\r\n        for (let { body: role } of this.board.grids) {\r\n            if (role && role.is(\"launcher\")) {\r\n                this.relati(role);\r\n            }\r\n        }\r\n    }\r\n\r\n    relati(role: RelatiRole) {\r\n        if (role.is(\"repeater\")) return;\r\n        role.gain(\"repeater\");\r\n\r\n        let traces: RelatiGrid[][] = this.router.getRoutes(\r\n            role.grid, role.symbol, [\"receiver\"]\r\n        );\r\n\r\n        for (let [{ body: role }] of traces) {\r\n            if (role) this.relati(role);\r\n        }\r\n    }\r\n}\r\n","import { GridDirection } from \"./GridBoard\";\r\nimport { RelatiStatus, RelatiSymbol, RelatiRouteType, RelatiGrid } from \"./RelatiDefs\";\r\n\r\nlet {\r\n    F, B, R, L, FR, FL, BR, BL,\r\n    FF, BB, RR, LL, FFRR, FFLL, BBRR, BBLL,\r\n    FFR, FFL, BBR, BBL, FRR, FLL, BRR, BLL\r\n} = GridDirection;\r\n\r\nconst NORMAL_ROUTES = [F, B, R, L, FR, FL, BR, BL];\r\n\r\nconst REMOTE_NORMAL_ROUTES = [\r\n    [FF, F],\r\n    [BB, B],\r\n    [RR, R],\r\n    [LL, L],\r\n    [FFRR, FR],\r\n    [FFLL, FL],\r\n    [BBRR, BR],\r\n    [BBLL, BL]\r\n];\r\n\r\nconst REMOTE_STABLE_ROUTES = [\r\n    [FFR, FF, F],\r\n    [FFR, FR, F],\r\n    [FFR, FR, R],\r\n    [FFL, FF, F],\r\n    [FFL, FL, F],\r\n    [FFL, FL, L],\r\n    [BBR, BB, B],\r\n    [BBR, BR, B],\r\n    [BBR, BR, R],\r\n    [BBL, BB, B],\r\n    [BBL, BL, B],\r\n    [BBL, BL, L],\r\n    [FRR, FR, F],\r\n    [FRR, RR, R],\r\n    [FRR, FR, R],\r\n    [FLL, FL, F],\r\n    [FLL, LL, L],\r\n    [FLL, FL, L],\r\n    [BRR, BR, B],\r\n    [BRR, RR, R],\r\n    [BRR, BR, R],\r\n    [BLL, BL, B],\r\n    [BLL, LL, L],\r\n    [BLL, BL, L]\r\n];\r\n\r\nexport default class RelatiRouter {\r\n    constructor(public routeType: RelatiRouteType) { }\r\n\r\n    hasRoute(grid: RelatiGrid, symbol: RelatiSymbol, statusList: RelatiStatus[]) {\r\n        if (this.routeType === \"common\") {\r\n            for (let i = 0; i < 24; i++) {\r\n                let targetGrid = grid.getGrid(REMOTE_STABLE_ROUTES[i][0]);\r\n                let middleGrid1 = grid.getGrid(REMOTE_STABLE_ROUTES[i][1]) as RelatiGrid;\r\n                let middleGrid2 = grid.getGrid(REMOTE_STABLE_ROUTES[i][2]) as RelatiGrid;\r\n\r\n                if (\r\n                    targetGrid &&\r\n                    targetGrid.body &&\r\n                    targetGrid.body.symbol === symbol &&\r\n                    targetGrid.body.is(statusList, \"any\") &&\r\n                    !middleGrid1.body &&\r\n                    !middleGrid2.body\r\n                ) return true;\r\n            }\r\n\r\n            for (let i = 0; i < 8; i++) {\r\n                let targetGrid = grid.getGrid(REMOTE_NORMAL_ROUTES[i][0]);\r\n                let middleGrid = grid.getGrid(REMOTE_NORMAL_ROUTES[i][1]) as RelatiGrid;\r\n\r\n                if (\r\n                    targetGrid &&\r\n                    targetGrid.body &&\r\n                    targetGrid.body.symbol === symbol &&\r\n                    targetGrid.body.is(statusList, \"any\") &&\r\n                    !middleGrid.body\r\n                ) return true;\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < 8; i++) {\r\n            let targetGrid = grid.getGrid(NORMAL_ROUTES[i]);\r\n\r\n            if (\r\n                targetGrid &&\r\n                targetGrid.body &&\r\n                targetGrid.body.symbol === symbol &&\r\n                targetGrid.body.is(statusList, \"any\")\r\n            ) return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    getRoutes(grid: RelatiGrid, symbol: RelatiSymbol, statusList: RelatiStatus[]) {\r\n        let routes: RelatiGrid[][] = [];\r\n\r\n        if (this.routeType === \"common\") {\r\n            for (let i = 0; i < 24; i++) {\r\n                let targetGrid = grid.getGrid(REMOTE_STABLE_ROUTES[i][0]);\r\n                let middleGrid1 = grid.getGrid(REMOTE_STABLE_ROUTES[i][1]) as RelatiGrid;\r\n                let middleGrid2 = grid.getGrid(REMOTE_STABLE_ROUTES[i][2]) as RelatiGrid;\r\n\r\n                if (\r\n                    targetGrid &&\r\n                    targetGrid.body &&\r\n                    targetGrid.body.symbol === symbol &&\r\n                    targetGrid.body.is(statusList, \"any\") &&\r\n                    !middleGrid1.body &&\r\n                    !middleGrid2.body\r\n                ) routes.push([targetGrid, middleGrid1, middleGrid2]);\r\n            }\r\n\r\n            for (let i = 0; i < 8; i++) {\r\n                let targetGrid = grid.getGrid(REMOTE_NORMAL_ROUTES[i][0]);\r\n                let middleGrid = grid.getGrid(REMOTE_NORMAL_ROUTES[i][1]) as RelatiGrid;\r\n\r\n                if (\r\n                    targetGrid &&\r\n                    targetGrid.body &&\r\n                    targetGrid.body.symbol === symbol &&\r\n                    targetGrid.body.is(statusList, \"any\") &&\r\n                    !middleGrid.body\r\n                ) routes.push([targetGrid, middleGrid]);\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < 8; i++) {\r\n            let targetGrid = grid.getGrid(NORMAL_ROUTES[i]);\r\n\r\n            if (\r\n                targetGrid &&\r\n                targetGrid.body &&\r\n                targetGrid.body.symbol === symbol &&\r\n                targetGrid.body.is(statusList, \"any\")\r\n            ) routes.push([targetGrid]);\r\n        }\r\n\r\n        return routes;\r\n    }\r\n}\r\n","import RelatiPlayer from \"./RelatiPlayer\";\r\nimport RelatiRole from \"./RelatiRole\";\r\nimport { RelatiBoard, RelatiRouteType, RelatiSymbol, RelatiGrid } from \"./RelatiDefs\";\r\nimport { GridBoard } from \"./GridBoard\";\r\nimport RelatiSignal from \"./RelatiSignal\";\r\nimport RelatiRouter from \"./RelatiRouter\";\r\n\r\nexport default class RelatiGame {\r\n    public turn = 0;\r\n    public signal: RelatiSignal;\r\n    public router: RelatiRouter;\r\n    public totalPlayer: number;\r\n    public winner: RelatiSymbol | \"\" | null = null;\r\n    public get nowPlayer() { return this.players[this.turn % 2]; }\r\n\r\n    constructor(\r\n        public players: RelatiPlayer[] = [new RelatiPlayer(\"O\"), new RelatiPlayer(\"X\")],\r\n        public board: RelatiBoard = new GridBoard<RelatiRole>(9, 9),\r\n        public routeType: RelatiRouteType = \"common\"\r\n    ) {\r\n        this.totalPlayer = players.length;\r\n        this.signal = new RelatiSignal(routeType, board);\r\n        this.router = this.signal.router;\r\n    }\r\n\r\n    restart() {\r\n        this.turn = 0;\r\n        this.winner = null;\r\n        this.board.grids.forEach(grid => delete grid.body);\r\n    }\r\n\r\n    onGridSelect(grid: RelatiGrid | null) {\r\n        if (!grid || grid.body || this.winner) return;\r\n\r\n        let role, { nowPlayer, totalPlayer } = this;\r\n\r\n        if (this.turn < totalPlayer) {\r\n            role = new RelatiRole(grid, nowPlayer.symbol);\r\n            role.gain(\"launcher\");\r\n        } else if (this.gridIsPlaceable(grid, nowPlayer.symbol)) {\r\n            role = new RelatiRole(grid, nowPlayer.symbol);\r\n            role.gain(\"receiver\");\r\n        } else return;\r\n\r\n        this.turn++;\r\n        grid.body = role;\r\n        this.signal.interrupt();\r\n        this.signal.recovery();\r\n\r\n        if (this.turn >= totalPlayer) {\r\n            let playerPlaceable = false;\r\n\r\n            for (var i = 0; i < totalPlayer; i++) {\r\n                let player = this.nowPlayer;\r\n                let hasPlaceableGrid = this.hasPlaceableGrid(player.symbol);\r\n\r\n                if (hasPlaceableGrid) {\r\n                    playerPlaceable = true;\r\n                    break;\r\n                } else this.turn++;\r\n            }\r\n\r\n            if (!playerPlaceable) this.winner = \"\";\r\n            else if (this.nowPlayer === nowPlayer) this.winner = nowPlayer.symbol;\r\n        }\r\n    }\r\n\r\n    gridIsPlaceable(grid: RelatiGrid, symbol: RelatiSymbol) {\r\n        return this.router.hasRoute(grid, symbol, [\"launcher\", \"repeater\"]);\r\n    }\r\n\r\n    hasPlaceableGrid(symbol: RelatiSymbol) {\r\n        for (let grid of this.board.grids) {\r\n            if (!grid.body && this.gridIsPlaceable(grid, symbol)) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    getPlaceableGrids(symbol: RelatiSymbol) {\r\n        let grids: RelatiGrid[] = [];\r\n\r\n        for (let grid of this.board.grids) {\r\n            if (!grid.body && this.gridIsPlaceable(grid, symbol)) {\r\n                grids.push(grid);\r\n            }\r\n        }\r\n\r\n        return grids;\r\n    }\r\n}\r\n","export default {\r\n    \"\": \"#888\",\r\n    \"O\": \"crimson\",\r\n    \"X\": \"royalblue\",\r\n    \"D\": \"goldenrod\",\r\n    \"R\": \"seagreen\",\r\n    \"A\": \"blueviolet\"\r\n};","import './page.scss';\r\nimport React from 'react';\r\nimport classNames from 'classnames';\r\n\r\ntype PageProps = React.DetailedHTMLProps<\r\n  React.HTMLAttributes<HTMLDivElement>,\r\n  HTMLDivElement\r\n>;\r\n\r\nexport default function Page({ ...props }: PageProps) {\r\n  props.className = classNames(props.className, 'page');\r\n  return <div {...props}></div>;\r\n}\r\n","import './button.scss';\r\nimport React from 'react';\r\nimport classNames from 'classnames';\r\n\r\ntype ButtonProps = React.DetailedHTMLProps<\r\n  React.ButtonHTMLAttributes<HTMLButtonElement>,\r\n  HTMLButtonElement\r\n> & { icon: string };\r\n\r\nexport default function Button({...props}: ButtonProps) {\r\n  props.className = classNames(props.className, props.icon);\r\n  delete props.icon;\r\n  return <button {...props}></button>;\r\n}","import './button-group.scss';\r\nimport React from 'react';\r\nimport classNames from 'classnames';\r\n\r\ntype ButtonGroupProps = React.DetailedHTMLProps<\r\n  React.HTMLAttributes<HTMLDivElement>,\r\n  HTMLDivElement\r\n>;\r\n\r\nexport default function ButtonGroup({...props}: ButtonGroupProps) {\r\n  props.className = classNames(props.className, 'button-group');\r\n  return <div {...props}></div>;\r\n}","import './main-page.scss';\r\nimport React from 'react';\r\nimport { Redirect } from 'react-router';\r\nimport { Page } from '../../components/Page';\r\nimport { Button, ButtonGroup } from '../../components/Button';\r\n\r\ntype MainPageState = { pathName: string };\r\n\r\nexport default class MainPage extends React.Component<any, MainPageState> {\r\n  constructor(props: any) {\r\n    super(props);\r\n    this.state = { pathName: \"\" };\r\n  }\r\n\r\n  switchPathTo(pathName: string) {\r\n    this.setState({ pathName });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.pathName) return <Redirect to={this.state.pathName} />;\r\n\r\n    return (\r\n      <Page id=\"main-page\">\r\n        <div className=\"title\">Relati</div>\r\n        <ButtonGroup>\r\n          <Button icon=\"play\" onClick={e => this.switchPathTo('/game')} />\r\n          <Button icon=\"help\" onClick={e => this.switchPathTo('/help')} />\r\n        </ButtonGroup>\r\n      </Page>\r\n    );\r\n  }\r\n}\r\n","import \"./relati-board.scss\";\r\nimport React from 'react';\r\n\r\ntype BoardProps = React.DetailedHTMLProps<\r\n  React.HTMLAttributes<HTMLDivElement>,\r\n  HTMLDivElement\r\n> & {\r\n  id: string,\r\n  width: number,\r\n  height: number,\r\n  onCoorSelect?: (coor: { x: number, y: number }) => void\r\n};\r\n\r\ntype BoardState = { scaleRatio: number };\r\n\r\nclass Board extends React.Component<BoardProps, BoardState> {\r\n  public width: number;\r\n  public height: number;\r\n\r\n  constructor(props: BoardProps) {\r\n    super(props);\r\n\r\n    this.width = props.width * 5;\r\n    this.height = props.height * 5;\r\n    this.state = { scaleRatio: 0 };\r\n\r\n    window.addEventListener('resize', e => this.resize());\r\n  }\r\n\r\n  resize() {\r\n    let container = document.getElementById(this.props.id);\r\n    if (!container) return;\r\n\r\n    let containerWidth = container.offsetWidth;\r\n    let containerHeight = container.offsetHeight;\r\n\r\n    let scaleRatio = Math.min(\r\n      containerWidth / this.width,\r\n      containerHeight / this.height\r\n    ) * 0.95;\r\n\r\n    this.setState({ scaleRatio });\r\n  }\r\n\r\n  onBoardClick(e: React.MouseEvent) {\r\n    let { onCoorSelect } = this.props;\r\n    let { offsetX, offsetY } = e.nativeEvent;\r\n    let x = Math.floor(offsetX / 5), y = Math.floor(offsetY / 5);\r\n    if (onCoorSelect) onCoorSelect({ x, y });\r\n  }\r\n\r\n  componentDidMount() { this.resize(); }\r\n\r\n  render() {\r\n    let { width, height, props, props: { id, children } } = this;\r\n\r\n    let boardStyle = {\r\n      width, height,\r\n      transform: `scale(${this.state.scaleRatio})`,\r\n    };\r\n\r\n    let horizonLines = [];\r\n    let verticalLines = [];\r\n\r\n    for (let x = 1; x < props.height; x++) {\r\n      horizonLines.push(\r\n        <path key={x} stroke=\"#888\" strokeWidth=\"0.4\" d={`M 0 ${x * 5} H ${width}`} />\r\n      );\r\n    }\r\n\r\n    for (let y = 1; y < props.width; y++) {\r\n      verticalLines.push(\r\n        <path key={y} stroke=\"#888\" strokeWidth=\"0.4\" d={`M ${y * 5} 0 V ${height}`} />\r\n      );\r\n    }\r\n\r\n    return (\r\n      <div id={id} className=\"board-container\">\r\n        <div className=\"relati-board\" style={boardStyle}>\r\n          <svg width={width} height={height}>\r\n            {children}\r\n            <g className=\"grid-lines\">\r\n              {horizonLines}\r\n              {verticalLines}\r\n            </g>\r\n          </svg>\r\n          <div onClick={e => this.onBoardClick(e)}></div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Board;","import React from 'react';\r\n\r\ntype HintProps = { x: number, y: number, color: string };\r\n\r\nfunction Hint({ x, y, color }: HintProps) {\r\n  let cx = x * 5 + 2.5;\r\n  let cy = y * 5 + 2.5;\r\n  return <circle cx={cx} cy={cy} r=\"0.5\" fill={color}></circle>;\r\n}\r\n\r\nexport default Hint;","import React from 'react';\r\nimport { RelatiGrid, RelatiSymbolColor } from '../../game';\r\n\r\ntype GridProps = { grid: RelatiGrid };\r\n\r\nconst SymbolPathMap = {\r\n  'O': 'm 0 -1.5, a 1.5 1.5, 0 0 1, 0 3, a 1.5 1.5, 0 0 1, 0 -3',\r\n  'X': 'm -1.5 -1.5, l 3 3, m 0 -3, l -3 3'\r\n};\r\n\r\nfunction Grid({ grid }: GridProps) {\r\n  if (!grid.body) return <></>;\r\n\r\n  let paths = [];\r\n  let x = grid.x * 5 + 2.5;\r\n  let y = grid.y * 5 + 2.5;\r\n\r\n  let symbolProps = {\r\n    key: '1',\r\n    fill: 'none',\r\n    strokeWidth: '0.6',\r\n    stroke: RelatiSymbolColor[grid.body.symbol],\r\n    d: `M ${x} ${y}, ${SymbolPathMap[grid.body.symbol as 'O' | 'X']}`\r\n  };\r\n\r\n  if (grid.body.is('launcher')) {\r\n    symbolProps.strokeWidth = '1';\r\n    paths.push(<path {...symbolProps}></path>);\r\n    symbolProps.key = '2';\r\n    symbolProps.stroke = '#f2f2f2';\r\n    symbolProps.strokeWidth = '0.5';\r\n  } else if (!grid.body.is('repeater')) {\r\n    symbolProps.stroke = '#666';\r\n  }\r\n\r\n  paths.push(<path {...symbolProps}></path>);\r\n  return <g>{paths}</g>;\r\n}\r\n\r\nexport default Grid;","import './message-box.scss';\r\nimport React from 'react';\r\nimport { ButtonGroup, Button } from '../Button';\r\nimport { MessageBoxConfig } from '../MessageBox';\r\n\r\ntype MessageBoxProps = MessageBoxConfig;\r\ntype MessageBoxState = MessageBoxConfig & { initiative?: boolean };\r\n\r\nexport default class MessageBox extends React.Component<MessageBoxProps, MessageBoxState> {\r\n  constructor(props: MessageBoxProps) {\r\n    super(props);\r\n    this.state = { ...props };\r\n  }\r\n\r\n  static getDerivedStateFromProps(props: MessageBoxProps, state: MessageBoxState) {\r\n    if (state.initiative) {\r\n      delete state.initiative;\r\n      return state;\r\n    } else return { ...props };\r\n  }\r\n\r\n  render() {\r\n    if (this.state.show === false) return <></>;\r\n\r\n    var controls;\r\n\r\n    switch (this.state.type) {\r\n      case 'yorn': controls = (\r\n        <ButtonGroup>\r\n          <Button icon=\"accept\" onClick={e => this.userResponse(true)}></Button>\r\n          <Button icon=\"reject\" onClick={e => this.userResponse(false)}></Button>\r\n        </ButtonGroup>\r\n      ); break;\r\n\r\n      case 'hint': controls = (\r\n        <ButtonGroup>\r\n          <Button icon=\"verify\" onClick={e => this.userResponse(true)}></Button>\r\n        </ButtonGroup>\r\n      ); break;\r\n    }\r\n\r\n    return (\r\n      <div className=\"message-box-container\">\r\n        <div className=\"message-box\">\r\n          <div className={`message-icon ${this.state.icon}`}></div>\r\n          <div className=\"message-text\">{this.state.text}</div>\r\n          {controls}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  userResponse(result: boolean) {\r\n    this.setState({ show: false, initiative: true });\r\n    this.props.onUserResponse && this.props.onUserResponse(result);\r\n  }\r\n}\r\n","import React from 'react';\r\nimport { RelatiGrid, RelatiSymbolColor, RelatiRole } from '../../game';\r\n\r\ntype RouteProps = {\r\n  grids: RelatiGrid[]\r\n};\r\n\r\nexport default function Route({ grids }: RouteProps) {\r\n  if (!grids[0]) return <></>;\r\n\r\n  let routeStyle = {\r\n    fill: 'none',\r\n    strokeWidth: '0.6',\r\n    stroke: RelatiSymbolColor[(grids[0].body as RelatiRole).symbol],\r\n    d: `M ${grids.map(({ x, y }) => (\r\n      `${x * 5 + 2.5} ${y * 5 + 2.5}`\r\n    )).join(', L ')}`\r\n  };\r\n\r\n  return <path {...routeStyle} />;\r\n}","import './effect.scss';\r\nimport React from 'react';\r\nimport { RelatiBoard, RelatiRole, RelatiRouter, RelatiRouteType, RelatiGrid, RelatiSymbol } from '../../game';\r\nimport { GridBoard } from '../../game/GridBoard';\r\nimport Grid from '../RelatiGame/Grid';\r\nimport Route from './Route';\r\n\r\ntype EffectProps = {\r\n  turn: number,\r\n  symbol: RelatiSymbol,\r\n  routeType: RelatiRouteType,\r\n  board: RelatiBoard\r\n};\r\n\r\ntype EffectState = {\r\n  turn: number,\r\n  running: boolean,\r\n  routes: RelatiGrid[][]\r\n};\r\n\r\nexport default class Effect extends React.Component<EffectProps, EffectState> {\r\n  public board: RelatiBoard;\r\n  public router: RelatiRouter;\r\n\r\n  constructor(props: EffectProps) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      turn: props.turn,\r\n      running: false,\r\n      routes: []\r\n    };\r\n\r\n    this.board = new GridBoard<RelatiRole>(props.board.width, props.board.height);\r\n    this.router = new RelatiRouter(props.routeType)\r\n  }\r\n\r\n  static getDerivedStateFromProps(props: EffectProps, state: EffectState) {\r\n    if (props.turn !== state.turn) {\r\n      return {\r\n        turn: props.turn,\r\n        running: false,\r\n        routes: []\r\n      };\r\n    } else return null;\r\n  }\r\n\r\n  recovery(turn: number) {\r\n    for (let { body: role } of this.board.grids) {\r\n      if (role && role.is('launcher')) {\r\n        this.relati(role, turn);\r\n      }\r\n    }\r\n  }\r\n\r\n  relati(sourceRole: RelatiRole, turn: number, route: RelatiGrid[] = []) {\r\n    if (sourceRole.is('repeater')) return;\r\n    sourceRole.gain('repeater');\r\n\r\n    var repeatRelati = () => {\r\n      let routes: RelatiGrid[][] = this.router.getRoutes(\r\n        sourceRole.grid, sourceRole.symbol, ['receiver']\r\n      );\r\n\r\n      for (let route of routes) {\r\n        let [{ body: targetRole }] = route;\r\n\r\n        if (targetRole) {\r\n          route = [sourceRole.grid, ...route.reverse()];\r\n          this.relati(targetRole, turn, route);\r\n        }\r\n      }\r\n    };\r\n\r\n    if (this.state.turn === turn) {\r\n      this.setState({\r\n        running: true,\r\n        routes: [...this.state.routes, route]\r\n      });\r\n\r\n      setTimeout(repeatRelati, 250);\r\n    } else repeatRelati();\r\n  }\r\n\r\n  interrupt() {\r\n    for (let { body: role } of this.board.grids) {\r\n      if (role && role.symbol !== this.props.symbol) {\r\n        role.lost('repeater');\r\n      }\r\n    }\r\n  }\r\n\r\n  cloneBoard() {\r\n    for (let { i, body: role } of this.props.board.grids) {\r\n      let grid = this.board.grids[i];\r\n\r\n      if (role) {\r\n        if (!grid.body) {\r\n          grid.body = new RelatiRole(grid, role.symbol);\r\n          grid.body.status = { ...role.status };\r\n        }\r\n      } else delete grid.body;\r\n    }\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    if (!this.state.running) {\r\n      this.cloneBoard();\r\n      this.interrupt();\r\n      this.recovery(this.props.turn);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    let grids = this.board.grids.map((grid, key) => {\r\n      let role = this.props.board.grids[key].body;\r\n\r\n      if (role && !role.is('repeater')) {\r\n        if (grid.body) {\r\n          grid.body.lost('repeater');\r\n        }\r\n      }\r\n\r\n      return <Grid key={key} grid={grid} />\r\n    });\r\n\r\n    let routes = this.state.routes.map((route, key) => (\r\n      <Route key={key} grids={route} />\r\n    ));\r\n\r\n    return (\r\n      <>\r\n        <g className='effect-lines'>{routes}</g>\r\n        <g className='effect-grids'>{grids}</g>\r\n      </>\r\n    );\r\n  }\r\n}\r\n","import './game-page.scss';\r\nimport React from 'react';\r\nimport { Redirect } from 'react-router';\r\nimport { Page } from '../../components/Page';\r\nimport { Board, Hint } from '../../components/RelatiGame';\r\nimport { Button, ButtonGroup } from '../../components/Button';\r\nimport { MessageBox, MessageBoxConfig } from '../../components/MessageBox';\r\nimport { RelatiGame, RelatiGrid, RelatiSymbolColor } from '../../game';\r\nimport Effect from '../../components/RelatiGameEffect/Effect';\r\n\r\ntype GamePageState = { pathName: string, messageBoxConfig: MessageBoxConfig };\r\n\r\nclass GamePage extends React.Component<any, GamePageState> {\r\n  public game = new RelatiGame();\r\n\r\n  public selectCoor = ({ x, y }: { x: number, y: number }) => (\r\n    this.selectGrid(this.game.board.getGrid(x, y))\r\n  );\r\n\r\n  constructor(props: any) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      pathName: '',\r\n      messageBoxConfig: { show: false }\r\n    };\r\n  }\r\n\r\n  hideMessageBox() {\r\n    this.setState({ messageBoxConfig: { show: false } });\r\n  }\r\n\r\n  confirmSwitchPathTo(pathName: string) {\r\n    this.setState({\r\n      messageBoxConfig: {\r\n        icon: 'yorn',\r\n        text: '確認離開',\r\n        show: true,\r\n        type: 'yorn',\r\n        onUserResponse: confirm => {\r\n          if (confirm) this.switchPathTo(pathName);\r\n          else this.hideMessageBox();\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  switchPathTo(pathName: string) {\r\n    this.setState({ pathName });\r\n  }\r\n\r\n  selectGrid(grid: RelatiGrid | null) {\r\n    let { game } = this;\r\n    game.onGridSelect(grid);\r\n\r\n    if (game.winner !== null) {\r\n      var messageBoxConfig: MessageBoxConfig = {\r\n        icon: 'draw',\r\n        text: '平手',\r\n        show: true,\r\n        type: 'yorn',\r\n        onUserResponse: gameRestart => {\r\n          if (gameRestart) game.restart();\r\n          this.setState({ messageBoxConfig: { show: false } });\r\n        }\r\n      };\r\n\r\n      if (game.winner !== '') {\r\n        messageBoxConfig.icon = `${game.winner.toLowerCase()}win`;\r\n        messageBoxConfig.text = `${game.winner}獲勝`;\r\n      }\r\n\r\n      this.setState({ messageBoxConfig });\r\n    } else this.forceUpdate();\r\n  }\r\n\r\n  render() {\r\n    if (this.state.pathName) return <Redirect to={this.state.pathName} />;\r\n\r\n    let {\r\n      turn,\r\n      board,\r\n      routeType,\r\n      board: { width, height },\r\n      nowPlayer: { symbol }\r\n    } = this.game;\r\n\r\n    let hints = this.game.getPlaceableGrids(symbol).map(\r\n      ({ x, y }, key) => (\r\n        <Hint key={key} x={x} y={y} color={RelatiSymbolColor[symbol]} />\r\n      )\r\n    );\r\n\r\n    return (\r\n      <Page id=\"game-page\">\r\n        <div className=\"versus-header\">\r\n          <div className=\"player-o\"></div>\r\n          <div className=\"versus\"></div>\r\n          <div className=\"player-x\"></div>\r\n        </div>\r\n        <Board id=\"game-board\" width={width} height={height} onCoorSelect={this.selectCoor}>\r\n          <g className=\"hints\">{hints}</g>\r\n          <Effect turn={turn} symbol={symbol} board={board} routeType={routeType} />\r\n        </Board>\r\n        <ButtonGroup>\r\n          <Button icon=\"exit\" onClick={e => this.confirmSwitchPathTo('/main')} />\r\n        </ButtonGroup>\r\n        <MessageBox {...this.state.messageBoxConfig} />\r\n      </Page>\r\n    );\r\n  }\r\n}\r\n\r\nexport default GamePage;","import './help-page.scss';\r\nimport React from 'react';\r\nimport { Redirect } from 'react-router';\r\nimport { Page } from '../../components/Page';\r\nimport { Button, ButtonGroup } from '../../components/Button';\r\nimport { MessageBox, MessageBoxConfig } from '../../components/MessageBox';\r\nimport { RelatiGame } from '../../game';\r\n\r\ntype HelpPageState = { pathName: string, messageBoxConfig: MessageBoxConfig };\r\n\r\nexport default class HelpPage extends React.Component<any, HelpPageState> {\r\n  public game = new RelatiGame();\r\n\r\n  constructor(props: any) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      pathName: '',\r\n      messageBoxConfig: { show: false }\r\n    };\r\n  }\r\n\r\n  hideMessageBox() {\r\n    this.setState({ messageBoxConfig: { show: false } });\r\n  }\r\n\r\n  confirmSwitchPathTo(pathName: string) {\r\n    this.setState({\r\n      messageBoxConfig: {\r\n        icon: 'yorn',\r\n        text: '確認離開',\r\n        show: true,\r\n        type: 'yorn',\r\n        onUserResponse: confirm => {\r\n          if (confirm) this.switchPathTo(pathName);\r\n          else this.hideMessageBox();\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  switchPathTo(pathName: string) {\r\n    this.setState({ pathName });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.pathName) return <Redirect to={this.state.pathName} />;\r\n\r\n    return (\r\n      <Page id=\"help-page\">\r\n        <div className=\"description\">\r\n          <h2>遊戲玩法</h2>\r\n          <p>遊戲開始時，可選擇棋盤上任何空格下子</p>\r\n          <p>遊戲開始後，只能在棋子連線範圍內下子</p>\r\n          <p>跨格連線中間經過的格子必須為空格，倘若之後對方下子在空格時，該連線將會失效</p>\r\n          <p>當原本的連線失效時，棋子將會尋找新的連線方式，若找不到時，該棋子的連線範圍將會失效</p>\r\n          <p>當連線範圍失效的棋子找到新的連線方式時，該棋子的連線範圍將會恢復</p>\r\n          <p>當對方無法繼續下子時，即為我方的勝利</p>\r\n        </div>\r\n        <ButtonGroup>\r\n          <Button icon=\"exit\" onClick={() => this.confirmSwitchPathTo('/main')} />\r\n        </ButtonGroup>\r\n        <MessageBox {...this.state.messageBoxConfig} />\r\n      </Page>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\nimport './App.scss';\nimport { Route, HashRouter as Router } from 'react-router-dom';\n\nimport { MainPage } from './pages/MainPage';\nimport { GamePage } from './pages/GamePage';\nimport { HelpPage } from './pages/HelpPage';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <Router>\n        <Route path=\"/(main|menu|home|)\" exact component={MainPage} />\n        <Route path=\"/(game|play)\" component={GamePage} />\n        <Route path=\"/help\" component={HelpPage} />\n      </Router>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}