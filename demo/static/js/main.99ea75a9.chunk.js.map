{"version":3,"sources":["game/GridBoard.ts","game/index.ts","game/RelatiPlayer.ts","game/RelatiRole.ts","game/RelatiSignal.ts","game/RelatiRouter.ts","game/RelatiGame.ts","game/RelatiSymbolColor.ts","components/Button/Button.tsx","components/Button/ButtonGroup.tsx","components/Page/Page.tsx","views/MainPage/MainPage.tsx","components/MessageBox/MessageBox.tsx","components/RelatiGame/Board.tsx","components/RelatiGame/Hint.tsx","components/RelatiGame/Grid.tsx","components/RelatiGameEffect/Route.tsx","components/RelatiGameEffect/Effect.tsx","views/GamePage/GamePage.tsx","views/HelpPage/HelpPage.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["GridDirection","GridBoard","width","height","Object","C_Users_oo00_Documents_Project_Github_relati_react_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","this","length","grids","x","y","grid","Grid","i","C_Users_oo00_Documents_Project_Github_relati_react_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__","key","value","board","body","f","b","r","l","undefined","direction","getGrid","_RelatiGame__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","d","__webpack_exports__","_RelatiRole__WEBPACK_IMPORTED_MODULE_1__","_RelatiSymbolColor__WEBPACK_IMPORTED_MODULE_3__","_RelatiRouter__WEBPACK_IMPORTED_MODULE_4__","RelatiPlayer","symbol","RelatiRole","status","statusName","matchType","statusNameList","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","err","return","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","RelatiSignal","routeType","C_Users_oo00_Documents_Project_Github_relati_react_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_1__","router","RelatiRouter","role","lost","is","relati","sourceRole","gain","routes","getRoutes","_ref7","targetRole","C_Users_oo00_Documents_Project_Github_relati_react_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","F","B","R","L","FR","FL","BR","BL","FF","BB","RR","LL","FFRR","FFLL","BBRR","BBLL","FFR","FFL","BBR","BBL","FRR","FLL","BRR","BLL","NORMAL_ROUTES","REMOTE_NORMAL_ROUTES","REMOTE_STABLE_ROUTES","sourceGrid","statusList","targetGrid","middleGrid1","middleGrid2","middleGrid","push","RelatiGame","players","arguments","turn","signal","totalPlayer","winner","forEach","nowPlayer","gridIsPlaceable","interrupt","recovery","playerPlaceable","player","hasPlaceableGrid","hasRoute","","A","D","O","X","Button","_ref","props","esm_extends","className","classNames","icon","react_default","a","createElement","ButtonGroup","Page","MainPage","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","pathName","setState","_this2","react_router","to","id","onClick","e","switchPathTo","React","Component","MessageBox","objectSpread","initiative","result","show","onUserResponse","controls","Fragment","type","userResponse","concat","text","Board","scaleRatio","window","addEventListener","resize","container","document","getElementById","containerWidth","offsetWidth","containerHeight","offsetHeight","Math","min","onCoorSelect","_e$nativeEvent","nativeEvent","offsetX","offsetY","floor","_this$props","children","boardStyle","transform","horizonLines","verticalLines","stroke","strokeWidth","style","onBoardClick","Hint","color","cx","cy","fill","SymbolPathMap","paths","symbolProps","RelatiSymbolColor","Route","routeStyle","map","_ref2","join","Effect","unmounted","running","route","repeatRelati","relatiRoute","_relatiRoute","slicedToArray","toConsumableArray","reverse","setTimeout","_ref6","cloneBoard","_this3","GamePage","game","selectCoor","selectGrid","messageBoxConfig","confirm","hideMessageBox","onGridSelect","gameRestart","restart","toLowerCase","forceUpdate","_this4","_this$game","_this$game$board","hints","getPlaceableGrids","Board_Board","Effect_Effect","confirmSwitchPathTo","MessageBox_MessageBox","HelpPage","App","react_router_dom","path","exact","component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.99ea75a9.chunk.js","sourcesContent":["/** 棋盤格方向(相對位置) */\r\nexport enum GridDirection {\r\n    /** (x + 0, y + 0)原位 */\r\n    C = 0x0000,\r\n\r\n    /** (x + 0, y - 1)向前 */\r\n    F = 0x1000,\r\n    /** (x + 0, y + 1)向後 */\r\n    B = 0x0100,\r\n    /** (x + 1, y + 0)向右 */\r\n    R = 0x0010,\r\n    /** (x - 1, y + 0)向左 */\r\n    L = 0x0001,\r\n    /** (x + 1, y - 1)向右前 */\r\n    FR = 0x1010,\r\n    /** (x - 1, y - 1)向左前 */\r\n    FL = 0x1001,\r\n    /** (x + 1, y + 1)向右後 */\r\n    BR = 0x0110,\r\n    /** (x - 1, y + 1)向左後 */\r\n    BL = 0x0101,\r\n\r\n    /** (x + 0, y - 2)向前兩單位 */\r\n    FF = 0x2000,\r\n    /** (x + 0, y + 2)向後兩單位 */\r\n    BB = 0x0200,\r\n    /** (x + 2, y + 0)向右兩單位 */\r\n    RR = 0x0020,\r\n    /** (x - 2, y + 0)向左兩單位 */\r\n    LL = 0x0002,\r\n    /** (x + 2, y - 2)向右前兩單位 */\r\n    FFRR = 0x2020,\r\n    /** (x - 2, y - 2)向左前兩單位 */\r\n    FFLL = 0x2002,\r\n    /** (x + 2, y + 2)向右後兩單位 */\r\n    BBRR = 0x0220,\r\n    /** (x - 2, y + 2)向左後兩單位 */\r\n    BBLL = 0x0202,\r\n\r\n    /** (x + 1, y - 2) */\r\n    FFR = 0x2010,\r\n    /** (x - 1, y - 2) */\r\n    FFL = 0x2001,\r\n    /** (x + 1, y + 2) */\r\n    BBR = 0x0210,\r\n    /** (x - 1, y + 2) */\r\n    BBL = 0x0201,\r\n    /** (x + 2, y - 1) */\r\n    FRR = 0x1020,\r\n    /** (x - 2, y - 1) */\r\n    FLL = 0x1002,\r\n    /** (x + 2, y + 1) */\r\n    BRR = 0x0120,\r\n    /** (x - 2, y + 1) */\r\n    BLL = 0x0102,\r\n}\r\n\r\n/**\r\n * 棋盤\r\n * @generic {GridBody} 棋盤格內容\r\n */\r\nexport class GridBoard<GridBody> {\r\n    /** 寬度 */\r\n    public width: number;\r\n    /** 高度 */\r\n    public height: number;\r\n    /** 格數 */\r\n    public length: number;\r\n    /** 棋盤格 */\r\n    public grids: Array<Grid<GridBody>>;\r\n\r\n    /**\r\n     * 建立棋盤\r\n     * @param width 寬度\r\n     * @param height 高度\r\n     */\r\n    constructor(width: number, height: number) {\r\n        this.width = width;\r\n        this.height = height;\r\n        this.length = width * height;\r\n        this.grids = [];\r\n\r\n        for (let x = 0; x < width; x++) {\r\n            for (let y = 0; y < height; y++) {\r\n                const grid = new Grid<GridBody>(x, y, this);\r\n                this.grids[grid.i] = grid;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 取得棋盤格\r\n     * @param x X座標\r\n     * @param y Y座標\r\n     * @return 棋盤格或空值\r\n     */\r\n    public getGrid(x: number, y: number): Grid<GridBody> | null {\r\n        if (\r\n            x < 0 || x >= this.width ||\r\n            y < 0 || y >= this.height\r\n        ) { return null; }\r\n\r\n        const i = x * this.height + y;\r\n        return this.grids[i];\r\n    }\r\n}\r\n\r\n/**\r\n * 棋盤格\r\n * @generic {GridBody} 棋盤格內容\r\n */\r\nexport class Grid<GridBody> {\r\n    /** X座標 */\r\n    public x: number;\r\n    /** Y座標 */\r\n    public y: number;\r\n    /** 索引 */\r\n    public i: number;\r\n    /** 內容 */\r\n    public body?: GridBody;\r\n    /** 所屬棋盤 */\r\n    public board: GridBoard<GridBody>;\r\n\r\n    /**\r\n     * 建立棋盤格\r\n     * @param x X座標\r\n     * @param y Y座標\r\n     * @param board 棋盤\r\n     */\r\n    constructor(x: number, y: number, board: GridBoard<GridBody>) {\r\n        this.board = board;\r\n        this.x = x;\r\n        this.y = y;\r\n        this.i = x * board.height + y;\r\n    }\r\n\r\n    /**\r\n     * 取得棋盤格\r\n     * @param direction 相對位置(方向)\r\n     * @see GridDirection\r\n     * @return 棋盤格或空值\r\n     */\r\n    public getGrid(direction: GridDirection): Grid<GridBody> | null;\r\n\r\n    /**\r\n     * 取得棋盤格\r\n     * @param direction 相對位置(方向)，採用16進制，分別為F(Y - 1), B(Y + 1), R(X + 1), L(X - 1)\r\n     * @example\r\n     * var direction = 0x8050; // == (Y - 8, X + 5);\r\n     * @return 棋盤格或空值\r\n     */\r\n    public getGrid(direction: number): Grid<GridBody> | null;\r\n\r\n    /**\r\n     * 取得棋盤格\r\n     * @param f 相對位置，為-Y的移動單位\r\n     * @param b 相對位置，為+Y的移動單位\r\n     * @param r 相對位置，為+X的移動單位\r\n     * @param l 相對位置，為-X的移動單位\r\n     * @return 棋盤格或空值\r\n     */\r\n    public getGrid(f: number, b: number, r: number, l: number): Grid<GridBody> | null;\r\n    public getGrid(f: number, b?: number, r?: number, l?: number): Grid<GridBody> | null {\r\n        if (b === undefined || r === undefined || l === undefined) {\r\n            const direction = f;\r\n            f = (0xF000 & direction) >> 12;\r\n            b = (0x0F00 & direction) >> 8;\r\n            r = (0x00F0 & direction) >> 4;\r\n            l = (0x000F & direction);\r\n        }\r\n\r\n        const x = this.x + r - l;\r\n        const y = this.y + b - f;\r\n        return this.board.getGrid(x, y);\r\n    }\r\n}\r\n","export { default as RelatiGame } from \"./RelatiGame\";\r\nexport { default as RelatiRole } from \"./RelatiRole\";\r\nexport { default as RelatiPlayer } from \"./RelatiPlayer\";\r\nexport { default as RelatiSymbolColor } from \"./RelatiSymbolColor\";\r\nexport { default as RelatiRouter } from \"./RelatiRouter\";\r\nexport { default as RelatiSignal } from \"./RelatiSignal\";\r\nexport * from \"./RelatiDefs\";\r\n","import { RelatiSymbol } from \"./RelatiDefs\";\r\n\r\nexport default class RelatiPlayer {\r\n    constructor(public symbol: RelatiSymbol) { }\r\n}\r\n","import { RelatiGrid, RelatiStatus, RelatiSymbol } from \"./RelatiDefs\";\r\n\r\nexport default class RelatiRole {\r\n    /** 狀態存儲 */\r\n    public status: { [status: string]: boolean } = {};\r\n\r\n    constructor(\r\n        /** 所在棋盤格 */\r\n        public grid: RelatiGrid,\r\n        /** 符號 */\r\n        public symbol: RelatiSymbol\r\n    ) { }\r\n\r\n    /**\r\n     * 判斷是否符合狀態\r\n     * @param statusName 狀態名稱\r\n     */\r\n    public is(statusName: RelatiStatus): boolean;\r\n\r\n    /**\r\n     * 判斷是否符合所有狀態或任一狀態\r\n     * @param statusNameList 狀態名稱列表\r\n     * @param matchType 所有狀態 | 任一狀態\r\n     */\r\n    public is(statusNameList: RelatiStatus[], matchType: \"all\" | \"any\"): boolean;\r\n\r\n    public is(statusName: RelatiStatus | RelatiStatus[], matchType?: \"all\" | \"any\") {\r\n        if (typeof statusName === \"string\") return this.status[statusName];\r\n\r\n        let statusNameList = statusName;\r\n\r\n        if (matchType === \"all\") {\r\n            for (let status of statusNameList) {\r\n                if (!this.status[status]) return false;\r\n            }\r\n\r\n            return true;\r\n        } else {\r\n            for (let status of statusNameList) {\r\n                if (this.status[status]) return true;\r\n            }\r\n\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 獲得狀態\r\n     * @param status 狀態名稱\r\n     */\r\n    public gain(status: RelatiStatus): void;\r\n\r\n    /**\r\n     * 獲得多個狀態\r\n     * @param statusNameList 狀態名稱列表\r\n     */\r\n    public gain(statusNameList: RelatiStatus[]): void;\r\n\r\n    public gain(statusName: RelatiStatus | RelatiStatus[]) {\r\n        if (typeof statusName === \"string\") {\r\n            return this.status[statusName] = true;\r\n        }\r\n\r\n        let statusNameList = statusName;\r\n\r\n        for (let status of statusNameList) {\r\n            this.status[status] = true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 失去狀態\r\n     * @param status 狀態名稱\r\n     */\r\n    public lost(status: RelatiStatus): void;\r\n\r\n    /**\r\n     * 失去多個狀態\r\n     * @param statusNameList 狀態名稱列表\r\n     */\r\n    public lost(statusNameList: RelatiStatus[]): void;\r\n\r\n    public lost(statusName: RelatiStatus | RelatiStatus[]) {\r\n        if (typeof statusName === \"string\") {\r\n            return this.status[statusName] = false;\r\n        }\r\n\r\n        let statusNameList = statusName;\r\n\r\n        for (let status of statusNameList) {\r\n            this.status[status] = false;\r\n        }\r\n    }\r\n}\r\n","import { RelatiBoard, RelatiGrid, RelatiRouteType } from \"./RelatiDefs\";\r\nimport RelatiRole from \"./RelatiRole\";\r\nimport RelatiRouter from \"./RelatiRouter\";\r\n\r\nexport default class RelatiSignal {\r\n    /** 路由器 */\r\n    public router: RelatiRouter;\r\n\r\n    constructor(\r\n        public routeType: RelatiRouteType,\r\n        public board: RelatiBoard\r\n    ) { this.router = new RelatiRouter(routeType); }\r\n\r\n    /** 中斷 */\r\n    public interrupt() {\r\n        for (let { body: role } of this.board.grids) {\r\n            if (role) {\r\n                role.lost(\"repeater\");\r\n            }\r\n        }\r\n    }\r\n\r\n    /** 恢復 */\r\n    public recovery() {\r\n        for (let { body: role } of this.board.grids) {\r\n            if (role && role.is(\"launcher\")) {\r\n                this.relati(role);\r\n            }\r\n        }\r\n    }\r\n\r\n    /** 連線擴展 */\r\n    public relati(sourceRole: RelatiRole) {\r\n        if (sourceRole.is(\"repeater\")) return;\r\n        sourceRole.gain(\"repeater\");\r\n\r\n        let routes: RelatiGrid[][] = this.router.getRoutes(\r\n            sourceRole.grid, sourceRole.symbol, [\"receiver\"]\r\n        );\r\n\r\n        for (let [{ body: targetRole }] of routes) {\r\n            if (targetRole) this.relati(targetRole);\r\n        }\r\n    }\r\n}\r\n","import { GridDirection } from \"./GridBoard\";\r\nimport { RelatiGrid, RelatiRouteType, RelatiStatus, RelatiSymbol } from \"./RelatiDefs\";\r\n\r\nlet {\r\n    F, B, R, L, FR, FL, BR, BL,\r\n    FF, BB, RR, LL, FFRR, FFLL, BBRR, BBLL,\r\n    FFR, FFL, BBR, BBL, FRR, FLL, BRR, BLL\r\n} = GridDirection;\r\n\r\n/** 一般連線路徑 */\r\nconst NORMAL_ROUTES = [F, B, R, L, FR, FL, BR, BL];\r\n\r\n/** 遠程連線路徑 */\r\nconst REMOTE_NORMAL_ROUTES = [\r\n    [FF, F],\r\n    [BB, B],\r\n    [RR, R],\r\n    [LL, L],\r\n    [FFRR, FR],\r\n    [FFLL, FL],\r\n    [BBRR, BR],\r\n    [BBLL, BL]\r\n];\r\n\r\n/** 遠程穩定連線路徑 */\r\nconst REMOTE_STABLE_ROUTES = [\r\n    [FFR, FF, F],\r\n    [FFR, FR, F],\r\n    [FFR, FR, R],\r\n    [FFL, FF, F],\r\n    [FFL, FL, F],\r\n    [FFL, FL, L],\r\n    [BBR, BB, B],\r\n    [BBR, BR, B],\r\n    [BBR, BR, R],\r\n    [BBL, BB, B],\r\n    [BBL, BL, B],\r\n    [BBL, BL, L],\r\n    [FRR, FR, F],\r\n    [FRR, RR, R],\r\n    [FRR, FR, R],\r\n    [FLL, FL, F],\r\n    [FLL, LL, L],\r\n    [FLL, FL, L],\r\n    [BRR, BR, B],\r\n    [BRR, RR, R],\r\n    [BRR, BR, R],\r\n    [BLL, BL, B],\r\n    [BLL, LL, L],\r\n    [BLL, BL, L]\r\n];\r\n\r\nexport default class RelatiRouter {\r\n    constructor(public routeType: RelatiRouteType) { }\r\n\r\n    /**\r\n     * 判斷連線路徑是否存在\r\n     * @param sourceGrid 來源棋盤格\r\n     * @param symbol 對應符號\r\n     * @param statusList 狀態參考\r\n     * @return 是否存在路徑\r\n     */\r\n    public hasRoute(sourceGrid: RelatiGrid, symbol: RelatiSymbol, statusList: RelatiStatus[]) {\r\n        if (this.routeType === \"common\") {\r\n            for (let i = 0; i < 24; i++) {\r\n                let targetGrid = sourceGrid.getGrid(REMOTE_STABLE_ROUTES[i][0]);\r\n                let middleGrid1 = sourceGrid.getGrid(REMOTE_STABLE_ROUTES[i][1]) as RelatiGrid;\r\n                let middleGrid2 = sourceGrid.getGrid(REMOTE_STABLE_ROUTES[i][2]) as RelatiGrid;\r\n\r\n                if (\r\n                    targetGrid &&\r\n                    targetGrid.body &&\r\n                    targetGrid.body.symbol === symbol &&\r\n                    targetGrid.body.is(statusList, \"any\") &&\r\n                    !middleGrid1.body &&\r\n                    !middleGrid2.body\r\n                ) return true;\r\n            }\r\n\r\n            for (let i = 0; i < 8; i++) {\r\n                let targetGrid = sourceGrid.getGrid(REMOTE_NORMAL_ROUTES[i][0]);\r\n                let middleGrid = sourceGrid.getGrid(REMOTE_NORMAL_ROUTES[i][1]) as RelatiGrid;\r\n\r\n                if (\r\n                    targetGrid &&\r\n                    targetGrid.body &&\r\n                    targetGrid.body.symbol === symbol &&\r\n                    targetGrid.body.is(statusList, \"any\") &&\r\n                    !middleGrid.body\r\n                ) return true;\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < 8; i++) {\r\n            let targetGrid = sourceGrid.getGrid(NORMAL_ROUTES[i]);\r\n\r\n            if (\r\n                targetGrid &&\r\n                targetGrid.body &&\r\n                targetGrid.body.symbol === symbol &&\r\n                targetGrid.body.is(statusList, \"any\")\r\n            ) return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * 取得連線路徑\r\n     * @param sourceGrid 來源棋盤格\r\n     * @param symbol 對應符號\r\n     * @param statusList 狀態參考\r\n     * @return 所有存在路徑\r\n     */\r\n    public getRoutes(sourceGrid: RelatiGrid, symbol: RelatiSymbol, statusList: RelatiStatus[]) {\r\n        let routes: RelatiGrid[][] = [];\r\n\r\n        if (this.routeType === \"common\") {\r\n            for (let i = 0; i < 24; i++) {\r\n                let targetGrid = sourceGrid.getGrid(REMOTE_STABLE_ROUTES[i][0]);\r\n                let middleGrid1 = sourceGrid.getGrid(REMOTE_STABLE_ROUTES[i][1]) as RelatiGrid;\r\n                let middleGrid2 = sourceGrid.getGrid(REMOTE_STABLE_ROUTES[i][2]) as RelatiGrid;\r\n\r\n                if (\r\n                    targetGrid &&\r\n                    targetGrid.body &&\r\n                    targetGrid.body.symbol === symbol &&\r\n                    targetGrid.body.is(statusList, \"any\") &&\r\n                    !middleGrid1.body &&\r\n                    !middleGrid2.body\r\n                ) routes.push([targetGrid, middleGrid1, middleGrid2]);\r\n            }\r\n\r\n            for (let i = 0; i < 8; i++) {\r\n                let targetGrid = sourceGrid.getGrid(REMOTE_NORMAL_ROUTES[i][0]);\r\n                let middleGrid = sourceGrid.getGrid(REMOTE_NORMAL_ROUTES[i][1]) as RelatiGrid;\r\n\r\n                if (\r\n                    targetGrid &&\r\n                    targetGrid.body &&\r\n                    targetGrid.body.symbol === symbol &&\r\n                    targetGrid.body.is(statusList, \"any\") &&\r\n                    !middleGrid.body\r\n                ) routes.push([targetGrid, middleGrid]);\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < 8; i++) {\r\n            let targetGrid = sourceGrid.getGrid(NORMAL_ROUTES[i]);\r\n\r\n            if (\r\n                targetGrid &&\r\n                targetGrid.body &&\r\n                targetGrid.body.symbol === symbol &&\r\n                targetGrid.body.is(statusList, \"any\")\r\n            ) routes.push([targetGrid]);\r\n        }\r\n\r\n        return routes;\r\n    }\r\n}\r\n","import { GridBoard } from \"./GridBoard\";\r\nimport { RelatiBoard, RelatiGrid, RelatiRouteType, RelatiSymbol } from \"./RelatiDefs\";\r\nimport RelatiPlayer from \"./RelatiPlayer\";\r\nimport RelatiRole from \"./RelatiRole\";\r\nimport RelatiRouter from \"./RelatiRouter\";\r\nimport RelatiSignal from \"./RelatiSignal\";\r\n\r\nexport default class RelatiGame {\r\n    public turn = 0;\r\n    public signal: RelatiSignal;\r\n    public router: RelatiRouter;\r\n    public totalPlayer: number;\r\n    public winner: RelatiSymbol | \"\" | null = null;\r\n    public get nowPlayer() { return this.players[this.turn % 2]; }\r\n\r\n    constructor(\r\n        public players: RelatiPlayer[] = [new RelatiPlayer(\"O\"), new RelatiPlayer(\"X\")],\r\n        public board: RelatiBoard = new GridBoard<RelatiRole>(9, 9),\r\n        public routeType: RelatiRouteType = \"common\"\r\n    ) {\r\n        this.totalPlayer = players.length;\r\n        this.signal = new RelatiSignal(routeType, board);\r\n        this.router = this.signal.router;\r\n    }\r\n\r\n    /** 重新開始遊戲 */\r\n    public restart() {\r\n        this.turn = 0;\r\n        this.winner = null;\r\n        this.board.grids.forEach((grid: RelatiGrid) => delete grid.body);\r\n    }\r\n\r\n    /**\r\n     * 當棋盤格選取時\r\n     * @param grid 棋盤格\r\n     */\r\n    public onGridSelect(grid: RelatiGrid | null) {\r\n        if (!grid || grid.body || this.winner) return;\r\n\r\n        let { nowPlayer, totalPlayer } = this;\r\n        let role;\r\n\r\n        if (this.turn < totalPlayer) {\r\n            role = new RelatiRole(grid, nowPlayer.symbol);\r\n            role.gain(\"launcher\");\r\n        } else if (this.gridIsPlaceable(grid, nowPlayer.symbol)) {\r\n            role = new RelatiRole(grid, nowPlayer.symbol);\r\n            role.gain(\"receiver\");\r\n        } else return;\r\n\r\n        this.turn++;\r\n        grid.body = role;\r\n        this.signal.interrupt();\r\n        this.signal.recovery();\r\n\r\n        if (this.turn >= totalPlayer) {\r\n            let playerPlaceable = false;\r\n\r\n            for (let i = 0; i < totalPlayer; i++) {\r\n                let player = this.nowPlayer;\r\n                let hasPlaceableGrid = this.hasPlaceableGrid(player.symbol);\r\n\r\n                if (hasPlaceableGrid) {\r\n                    playerPlaceable = true;\r\n                    break;\r\n                } else this.turn++;\r\n            }\r\n\r\n            if (!playerPlaceable) this.winner = \"\";\r\n            else if (this.nowPlayer === nowPlayer) this.winner = nowPlayer.symbol;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 判斷棋盤格是否可供放置\r\n     * @param grid 棋盤格\r\n     * @param symbol 符號\r\n     */\r\n    public gridIsPlaceable(grid: RelatiGrid, symbol: RelatiSymbol) {\r\n        return this.router.hasRoute(grid, symbol, [\"launcher\", \"repeater\"]);\r\n    }\r\n\r\n    /**\r\n     * 判斷指定符號放置的可行性\r\n     * @param symbol 符號\r\n     */\r\n    public hasPlaceableGrid(symbol: RelatiSymbol) {\r\n        for (let grid of this.board.grids) {\r\n            if (!grid.body && this.gridIsPlaceable(grid, symbol)) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * 取得指定符號放置的棋盤格\r\n     * @param symbol 符號\r\n     */\r\n    public getPlaceableGrids(symbol: RelatiSymbol) {\r\n        let grids: RelatiGrid[] = [];\r\n\r\n        for (let grid of this.board.grids) {\r\n            if (!grid.body && this.gridIsPlaceable(grid, symbol)) {\r\n                grids.push(grid);\r\n            }\r\n        }\r\n\r\n        return grids;\r\n    }\r\n}\r\n","export default {\r\n    \"\": \"#888\",\r\n    \"A\": \"blueviolet\",\r\n    \"D\": \"goldenrod\",\r\n    \"O\": \"crimson\",\r\n    \"R\": \"seagreen\",\r\n    \"X\": \"royalblue\"\r\n};\r\n","import classNames from \"classnames\";\r\nimport React from \"react\";\r\nimport \"./button.scss\";\r\n\r\ntype ButtonProps = React.DetailedHTMLProps<\r\n  React.ButtonHTMLAttributes<HTMLButtonElement>,\r\n  HTMLButtonElement\r\n> & { icon: string };\r\n\r\nexport default function Button({ ...props }: ButtonProps) {\r\n  props.className = classNames(props.className, props.icon);\r\n  delete props.icon;\r\n  return <button {...props} />;\r\n}\r\n","import classNames from \"classnames\";\r\nimport React from \"react\";\r\nimport \"./button-group.scss\";\r\n\r\ntype ButtonGroupProps = React.DetailedHTMLProps<\r\n  React.HTMLAttributes<HTMLDivElement>,\r\n  HTMLDivElement\r\n>;\r\n\r\nexport default function ButtonGroup({ ...props }: ButtonGroupProps) {\r\n  props.className = classNames(props.className, \"button-group\");\r\n  return <div {...props} />;\r\n}\r\n","import classNames from \"classnames\";\r\nimport React from \"react\";\r\nimport \"./page.scss\";\r\n\r\ntype PageProps = React.DetailedHTMLProps<\r\n  React.HTMLAttributes<HTMLDivElement>,\r\n  HTMLDivElement\r\n>;\r\n\r\nexport default function Page({ ...props }: PageProps) {\r\n  props.className = classNames(props.className, \"page\");\r\n  return <div {...props} />;\r\n}\r\n","import React from \"react\";\r\nimport { Redirect } from \"react-router\";\r\nimport { Button, ButtonGroup } from \"../../components/Button\";\r\nimport { Page } from \"../../components/Page\";\r\nimport \"./main-page.scss\";\r\n\r\ninterface MainPageState { pathName: string; }\r\n\r\nexport default class MainPage extends React.Component<any, MainPageState> {\r\n  constructor(props: any) {\r\n    super(props);\r\n    this.state = { pathName: \"\" };\r\n  }\r\n\r\n  public switchPathTo(pathName: string) {\r\n    this.setState({ pathName });\r\n  }\r\n\r\n  public render() {\r\n    if (this.state.pathName) return <Redirect to={this.state.pathName} />;\r\n\r\n    return (\r\n      <Page id=\"main-page\">\r\n        <div className=\"title\">Relati</div>\r\n        <ButtonGroup>\r\n          <Button icon=\"play\" onClick={e => this.switchPathTo(\"/game\")} />\r\n          <Button icon=\"help\" onClick={e => this.switchPathTo(\"/help\")} />\r\n        </ButtonGroup>\r\n      </Page>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport { Button, ButtonGroup } from \"../Button\";\r\nimport { MessageBoxConfig } from \"../MessageBox\";\r\nimport \"./message-box.scss\";\r\n\r\ntype MessageBoxProps = MessageBoxConfig;\r\ntype MessageBoxState = MessageBoxConfig & { initiative?: boolean };\r\n\r\nexport default class MessageBox extends React.Component<MessageBoxProps, MessageBoxState> {\r\n  public static getDerivedStateFromProps(props: MessageBoxProps, state: MessageBoxState) {\r\n    if (state.initiative) {\r\n      delete state.initiative;\r\n      return state;\r\n    } else return { ...props };\r\n  }\r\n\r\n  constructor(props: MessageBoxProps) {\r\n    super(props);\r\n    this.state = { ...props };\r\n  }\r\n\r\n  public userResponse(result: boolean) {\r\n    this.setState({ show: false, initiative: true });\r\n    if (this.props.onUserResponse) this.props.onUserResponse(result);\r\n  }\r\n\r\n  public render() {\r\n    if (this.state.show === false) return <></>;\r\n\r\n    let controls;\r\n\r\n    switch (this.state.type) {\r\n      case \"yorn\":\r\n        controls = (\r\n          <ButtonGroup>\r\n            <Button icon=\"accept\" onClick={e => this.userResponse(true)} />\r\n            <Button icon=\"reject\" onClick={e => this.userResponse(false)} />\r\n          </ButtonGroup>\r\n        );\r\n\r\n        break;\r\n\r\n      case \"hint\":\r\n        controls = (\r\n          <ButtonGroup>\r\n            <Button icon=\"verify\" onClick={e => this.userResponse(true)} />\r\n          </ButtonGroup>\r\n        );\r\n\r\n        break;\r\n    }\r\n\r\n    return (\r\n      <div className=\"message-box-container\">\r\n        <div className=\"message-box\">\r\n          <div className={`message-icon ${this.state.icon}`} />\r\n          <div className=\"message-text\">{this.state.text}</div>\r\n          {controls}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport \"./relati-board.scss\";\r\n\r\ntype BoardProps = React.DetailedHTMLProps<\r\n  React.HTMLAttributes<HTMLDivElement>,\r\n  HTMLDivElement\r\n> & {\r\n  id: string,\r\n  width: number,\r\n  height: number,\r\n  onCoorSelect?: (coor: { x: number, y: number }) => void\r\n};\r\n\r\ninterface BoardState { scaleRatio: number; }\r\n\r\nexport default class Board extends React.Component<BoardProps, BoardState> {\r\n  public width: number;\r\n  public height: number;\r\n\r\n  constructor(props: BoardProps) {\r\n    super(props);\r\n\r\n    this.width = props.width * 5;\r\n    this.height = props.height * 5;\r\n    this.state = { scaleRatio: 0 };\r\n\r\n    window.addEventListener(\"resize\", (e) => this.resize());\r\n  }\r\n\r\n  public resize() {\r\n    let container = document.getElementById(this.props.id);\r\n    if (!container) return;\r\n\r\n    let containerWidth = container.offsetWidth;\r\n    let containerHeight = container.offsetHeight;\r\n\r\n    let scaleRatio = Math.min(\r\n      containerWidth / this.width,\r\n      containerHeight / this.height\r\n    ) * 0.95;\r\n\r\n    this.setState({ scaleRatio });\r\n  }\r\n\r\n  public onBoardClick(e: React.MouseEvent) {\r\n    let { onCoorSelect } = this.props;\r\n    let { offsetX, offsetY } = e.nativeEvent;\r\n    let x = Math.floor(offsetX / 5);\r\n    let y = Math.floor(offsetY / 5);\r\n    if (onCoorSelect) onCoorSelect({ x, y });\r\n  }\r\n\r\n  public componentDidMount() { this.resize(); }\r\n\r\n  public render() {\r\n    let { width, height, props, props: { id, children } } = this;\r\n\r\n    let boardStyle = {\r\n      height,\r\n      transform: `scale(${this.state.scaleRatio})`,\r\n      width\r\n    };\r\n\r\n    let horizonLines = [];\r\n    let verticalLines = [];\r\n\r\n    for (let x = 1; x < props.height; x++) {\r\n      horizonLines.push(\r\n        <path key={x} stroke=\"#888\" strokeWidth=\"0.4\" d={`M 0 ${x * 5} H ${width}`} />\r\n      );\r\n    }\r\n\r\n    for (let y = 1; y < props.width; y++) {\r\n      verticalLines.push(\r\n        <path key={y} stroke=\"#888\" strokeWidth=\"0.4\" d={`M ${y * 5} 0 V ${height}`} />\r\n      );\r\n    }\r\n\r\n    return (\r\n      <div id={id} className=\"board-container\">\r\n        <div className=\"relati-board\" style={boardStyle}>\r\n          <svg width={width} height={height}>\r\n            {children}\r\n            <g className=\"grid-lines\">\r\n              {horizonLines}\r\n              {verticalLines}\r\n            </g>\r\n          </svg>\r\n          <div onClick={e => this.onBoardClick(e)} />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\n\r\ninterface HintProps { x: number; y: number; color: string; }\r\n\r\nexport default function Hint({ x, y, color }: HintProps) {\r\n  let cx = x * 5 + 2.5;\r\n  let cy = y * 5 + 2.5;\r\n  return <circle cx={cx} cy={cy} r=\"0.5\" fill={color} />;\r\n}\r\n","import React from \"react\";\r\nimport { RelatiGrid, RelatiSymbolColor } from \"../../game\";\r\n\r\ninterface GridProps { grid: RelatiGrid; }\r\n\r\nconst SymbolPathMap = {\r\n  O: \"m 0 -1.5, a 1.5 1.5, 0 0 1, 0 3, a 1.5 1.5, 0 0 1, 0 -3\",\r\n  X: \"m -1.5 -1.5, l 3 3, m 0 -3, l -3 3\"\r\n};\r\n\r\nexport default function Grid({ grid }: GridProps) {\r\n  if (!grid.body) return <></>;\r\n\r\n  let paths = [];\r\n  let x = grid.x * 5 + 2.5;\r\n  let y = grid.y * 5 + 2.5;\r\n\r\n  let symbolProps = {\r\n    d: `M ${x} ${y}, ${SymbolPathMap[grid.body.symbol as \"O\" | \"X\"]}`,\r\n    fill: \"none\",\r\n    key: \"1\",\r\n    stroke: RelatiSymbolColor[grid.body.symbol],\r\n    strokeWidth: \"0.6\"\r\n  };\r\n\r\n  if (grid.body.is(\"launcher\")) {\r\n    symbolProps.strokeWidth = \"1\";\r\n    paths.push(<path {...symbolProps}/>);\r\n    symbolProps.key = \"2\";\r\n    symbolProps.stroke = \"#f2f2f2\";\r\n    symbolProps.strokeWidth = \"0.5\";\r\n  } else if (!grid.body.is(\"repeater\")) {\r\n    symbolProps.stroke = \"#666\";\r\n  }\r\n\r\n  paths.push(<path {...symbolProps}/>);\r\n  return <g>{paths}</g>;\r\n}\r\n","import React from \"react\";\r\nimport { RelatiGrid, RelatiRole, RelatiSymbolColor } from \"../../game\";\r\n\r\ninterface RouteProps {\r\n  grids: RelatiGrid[];\r\n}\r\n\r\nexport default function Route({ grids }: RouteProps) {\r\n  if (!grids[0]) return <></>;\r\n\r\n  let routeStyle = {\r\n    d: `M ${grids.map(({ x, y }) => (\r\n      `${x * 5 + 2.5} ${y * 5 + 2.5}`\r\n    )).join(\", L \")}`,\r\n    fill: \"none\",\r\n    stroke: RelatiSymbolColor[(grids[0].body as RelatiRole).symbol],\r\n    strokeWidth: \"0.6\",\r\n  };\r\n\r\n  return <path {...routeStyle} />;\r\n}\r\n","import React from \"react\";\r\nimport { RelatiBoard, RelatiGrid, RelatiRole, RelatiRouter, RelatiRouteType, RelatiSymbol } from \"../../game\";\r\nimport { GridBoard } from \"../../game/GridBoard\";\r\nimport Grid from \"../RelatiGame/Grid\";\r\nimport \"./effect.scss\";\r\nimport Route from \"./Route\";\r\n\r\ninterface EffectProps {\r\n  turn: number;\r\n  symbol: RelatiSymbol;\r\n  routeType: RelatiRouteType;\r\n  board: RelatiBoard;\r\n}\r\n\r\ninterface EffectState {\r\n  turn: number;\r\n  running: boolean;\r\n  routes: RelatiGrid[][];\r\n}\r\n\r\nexport default class Effect extends React.Component<EffectProps, EffectState> {\r\n  public static getDerivedStateFromProps(props: EffectProps, state: EffectState) {\r\n    if (props.turn !== state.turn) {\r\n      return {\r\n        routes: [],\r\n        running: false,\r\n        turn: props.turn\r\n      };\r\n    } else return null;\r\n  }\r\n\r\n  public board: RelatiBoard;\r\n  public unmounted: boolean = false;\r\n  public router: RelatiRouter;\r\n\r\n  constructor(props: EffectProps) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      routes: [],\r\n      running: false,\r\n      turn: props.turn,\r\n    };\r\n\r\n    this.board = new GridBoard<RelatiRole>(props.board.width, props.board.height);\r\n    this.router = new RelatiRouter(props.routeType);\r\n  }\r\n\r\n  public recovery(turn: number) {\r\n    for (let { body: role } of this.board.grids) {\r\n      if (role && role.is(\"launcher\")) {\r\n        this.relati(role, turn);\r\n      }\r\n    }\r\n  }\r\n\r\n  public relati(sourceRole: RelatiRole, turn: number, route: RelatiGrid[] = []) {\r\n    if (sourceRole.is(\"repeater\")) return;\r\n    sourceRole.gain(\"repeater\");\r\n\r\n    let repeatRelati = () => {\r\n      let routes: RelatiGrid[][] = this.router.getRoutes(\r\n        sourceRole.grid, sourceRole.symbol, [\"receiver\"]\r\n      );\r\n\r\n      for (let relatiRoute of routes) {\r\n        let [{ body: targetRole }] = relatiRoute;\r\n\r\n        if (targetRole) {\r\n          relatiRoute = [sourceRole.grid, ...relatiRoute.reverse()];\r\n          this.relati(targetRole, turn, relatiRoute);\r\n        }\r\n      }\r\n    };\r\n\r\n    if (this.unmounted) return;\r\n\r\n    if (this.state.turn === turn) {\r\n      this.setState({\r\n        routes: [...this.state.routes, route],\r\n        running: true\r\n      });\r\n\r\n      setTimeout(repeatRelati, 250);\r\n    } else repeatRelati();\r\n  }\r\n\r\n  public interrupt() {\r\n    for (let { body: role } of this.board.grids) {\r\n      if (role && role.symbol !== this.props.symbol) {\r\n        role.lost(\"repeater\");\r\n      }\r\n    }\r\n  }\r\n\r\n  public cloneBoard() {\r\n    for (let { i, body: role } of this.props.board.grids) {\r\n      let grid = this.board.grids[i];\r\n\r\n      if (role) {\r\n        if (!grid.body) {\r\n          grid.body = new RelatiRole(grid, role.symbol);\r\n          grid.body.status = { ...role.status };\r\n        }\r\n      } else delete grid.body;\r\n    }\r\n  }\r\n\r\n  public componentDidUpdate() {\r\n    if (!this.state.running) {\r\n      this.cloneBoard();\r\n      this.interrupt();\r\n      this.recovery(this.props.turn);\r\n    }\r\n  }\r\n\r\n  public componentWillUnmount() {\r\n    this.unmounted = true;\r\n  }\r\n\r\n  public componentDidMount() {\r\n    this.unmounted = false;\r\n  }\r\n\r\n  public render() {\r\n    let grids = this.board.grids.map((grid, key) => {\r\n      let role = this.props.board.grids[key].body;\r\n\r\n      if (role) {\r\n        if (!role.is(\"repeater\") && grid.body) {\r\n          grid.body.lost(\"repeater\");\r\n        }\r\n      } else delete grid.body;\r\n\r\n      return <Grid key={key} grid={grid} />;\r\n    });\r\n\r\n    let routes = this.state.routes.map((route, key) => (\r\n      <Route key={key} grids={route} />\r\n    ));\r\n\r\n    return (\r\n      <>\r\n        <g className=\"effect-lines\">{routes}</g>\r\n        <g className=\"effect-grids\">{grids}</g>\r\n      </>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport { Redirect } from \"react-router\";\r\nimport { Button, ButtonGroup } from \"../../components/Button\";\r\nimport { MessageBox, MessageBoxConfig } from \"../../components/MessageBox\";\r\nimport { Page } from \"../../components/Page\";\r\nimport { Board, Hint } from \"../../components/RelatiGame\";\r\nimport Effect from \"../../components/RelatiGameEffect/Effect\";\r\nimport { RelatiGame, RelatiGrid, RelatiSymbolColor } from \"../../game\";\r\nimport \"./game-page.scss\";\r\n\r\ninterface GamePageState { pathName: string; messageBoxConfig: MessageBoxConfig; }\r\n\r\nexport default class GamePage extends React.Component<any, GamePageState> {\r\n  public game = new RelatiGame();\r\n\r\n  constructor(props: any) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      messageBoxConfig: { show: false },\r\n      pathName: \"\"\r\n    };\r\n  }\r\n\r\n  public selectCoor = ({ x, y }: { x: number, y: number }) => (\r\n    this.selectGrid(this.game.board.getGrid(x, y))\r\n  )\r\n\r\n  public hideMessageBox() {\r\n    this.setState({ messageBoxConfig: { show: false } });\r\n  }\r\n\r\n  public confirmSwitchPathTo(pathName: string) {\r\n    this.setState({\r\n      messageBoxConfig: {\r\n        icon: \"yorn\",\r\n        onUserResponse: confirm => {\r\n          if (confirm) this.switchPathTo(pathName);\r\n          else this.hideMessageBox();\r\n        },\r\n        show: true,\r\n        text: \"確認離開\",\r\n        type: \"yorn\"\r\n      }\r\n    });\r\n  }\r\n\r\n  public switchPathTo(pathName: string) {\r\n    this.setState({ pathName });\r\n  }\r\n\r\n  public selectGrid(grid: RelatiGrid | null) {\r\n    let { game } = this;\r\n    game.onGridSelect(grid);\r\n\r\n    if (game.winner !== null) {\r\n      let messageBoxConfig: MessageBoxConfig = {\r\n        icon: \"draw\",\r\n        onUserResponse: gameRestart => {\r\n          if (gameRestart) game.restart();\r\n          this.setState({ messageBoxConfig: { show: false } });\r\n        },\r\n        show: true,\r\n        text: \"平手\",\r\n        type: \"yorn\"\r\n      };\r\n\r\n      if (game.winner !== \"\") {\r\n        messageBoxConfig.icon = `${game.winner.toLowerCase()}win`;\r\n        messageBoxConfig.text = `${game.winner}獲勝`;\r\n      }\r\n\r\n      this.setState({ messageBoxConfig });\r\n    } else this.forceUpdate();\r\n  }\r\n\r\n  public render() {\r\n    if (this.state.pathName) return <Redirect to={this.state.pathName} />;\r\n\r\n    let {\r\n      turn,\r\n      board,\r\n      routeType,\r\n      board: { width, height },\r\n      nowPlayer: { symbol }\r\n    } = this.game;\r\n\r\n    let hints = this.game.getPlaceableGrids(symbol).map(\r\n      ({ x, y }, key) => (\r\n        <Hint key={key} x={x} y={y} color={RelatiSymbolColor[symbol]} />\r\n      )\r\n    );\r\n\r\n    return (\r\n      <Page id=\"game-page\">\r\n        <div className=\"versus-header\">\r\n          <div className=\"player-o\" />\r\n          <div className=\"versus\" />\r\n          <div className=\"player-x\" />\r\n        </div>\r\n        <Board id=\"game-board\" width={width} height={height} onCoorSelect={this.selectCoor}>\r\n          <g className=\"hints\">{hints}</g>\r\n          <Effect turn={turn} symbol={symbol} board={board} routeType={routeType} />\r\n        </Board>\r\n        <ButtonGroup>\r\n          <Button icon=\"exit\" onClick={e => this.confirmSwitchPathTo(\"/main\")} />\r\n        </ButtonGroup>\r\n        <MessageBox {...this.state.messageBoxConfig} />\r\n      </Page>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport { Redirect } from \"react-router\";\r\nimport { Button, ButtonGroup } from \"../../components/Button\";\r\nimport { MessageBox, MessageBoxConfig } from \"../../components/MessageBox\";\r\nimport { Page } from \"../../components/Page\";\r\nimport { RelatiGame } from \"../../game\";\r\nimport \"./help-page.scss\";\r\n\r\ninterface HelpPageState { pathName: string; messageBoxConfig: MessageBoxConfig; }\r\n\r\nexport default class HelpPage extends React.Component<any, HelpPageState> {\r\n  public game = new RelatiGame();\r\n\r\n  constructor(props: any) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      messageBoxConfig: { show: false },\r\n      pathName: \"\"\r\n    };\r\n  }\r\n\r\n  public hideMessageBox() {\r\n    this.setState({ messageBoxConfig: { show: false } });\r\n  }\r\n\r\n  public confirmSwitchPathTo(pathName: string) {\r\n    this.setState({\r\n      messageBoxConfig: {\r\n        icon: \"yorn\",\r\n        onUserResponse: confirm => {\r\n          if (confirm) this.switchPathTo(pathName);\r\n          else this.hideMessageBox();\r\n        },\r\n        show: true,\r\n        text: \"確認離開\",\r\n        type: \"yorn\"\r\n      }\r\n    });\r\n  }\r\n\r\n  public switchPathTo(pathName: string) {\r\n    this.setState({ pathName });\r\n  }\r\n\r\n  public render() {\r\n    if (this.state.pathName) return <Redirect to={this.state.pathName} />;\r\n\r\n    return (\r\n      <Page id=\"help-page\">\r\n        <div className=\"description\">\r\n          <h2>遊戲玩法</h2>\r\n          <p>遊戲開始時，可選擇棋盤上任何空格下子</p>\r\n          <p>遊戲開始後，只能在棋子連線範圍內下子</p>\r\n          <p>跨格連線中間經過的格子必須為空格，倘若之後對方下子在空格時，該連線將會失效</p>\r\n          <p>當原本的連線失效時，棋子將會尋找新的連線方式，若找不到時，該棋子的連線範圍將會失效</p>\r\n          <p>當連線範圍失效的棋子找到新的連線方式時，該棋子的連線範圍將會恢復</p>\r\n          <p>當對方無法繼續下子時，即為我方的勝利</p>\r\n        </div>\r\n        <ButtonGroup>\r\n          <Button icon=\"exit\" onClick={() => this.confirmSwitchPathTo(\"/main\")} />\r\n        </ButtonGroup>\r\n        <MessageBox {...this.state.messageBoxConfig} />\r\n      </Page>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\nimport './App.scss';\nimport { Route, HashRouter as Router } from 'react-router-dom';\n\nimport { MainPage } from './views/MainPage';\nimport { GamePage } from './views/GamePage';\nimport { HelpPage } from './views/HelpPage';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <Router>\n        <Route path=\"/(main|menu|home|)\" exact component={MainPage} />\n        <Route path=\"/(game|play)\" component={GamePage} />\n        <Route path=\"/help\" component={HelpPage} />\n      </Router>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}